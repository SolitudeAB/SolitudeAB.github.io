<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SolitudeAB</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-01-02T13:41:33.849Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SolitudeAB</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于给hexo博客增加相册页面（实现瀑布流相册，实现加密相册）</title>
    <link href="http://example.com/2025/01/02/photo/"/>
    <id>http://example.com/2025/01/02/photo/</id>
    <published>2025-01-01T16:00:00.000Z</published>
    <updated>2025-01-02T13:41:33.849Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="32febf10dac453c26fcca2c27b5f81d5032b901309d464fbd10d9a2a68faa4b1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="建站记录" scheme="http://example.com/categories/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="建站记录" scheme="http://example.com/tags/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>插入图片</title>
    <link href="http://example.com/2025/01/02/test2/"/>
    <id>http://example.com/2025/01/02/test2/</id>
    <published>2025-01-01T16:00:00.000Z</published>
    <updated>2025-01-02T13:55:54.841Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ab6ab56d03439a49d3eb80567ab5f1ce986dafa83cc609f6db1d190e8c707d33"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="建站记录" scheme="http://example.com/categories/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="建站记录" scheme="http://example.com/tags/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>如何在 GitHub 上写博客？</title>
    <link href="http://example.com/2025/01/01/others/"/>
    <id>http://example.com/2025/01/01/others/</id>
    <published>2024-12-31T16:00:00.000Z</published>
    <updated>2025-01-02T07:09:52.827Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="df4051b53678646ded1e2fa7aa4cb09dd22a48420159fc1cf159c1caf8c866d3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="建站记录" scheme="http://example.com/categories/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="建站记录" scheme="http://example.com/tags/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>建站记录（二）：对butterfly项目的架构的梳理</title>
    <link href="http://example.com/2025/01/01/first/"/>
    <id>http://example.com/2025/01/01/first/</id>
    <published>2024-12-31T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.068Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在很多功能的实现过程中，我都因为不熟悉项目架构和具体代码而束手无策，尝试很多方法也事倍功半，因此决定在继续搭建博客之前先对butterfly主题的框架梳理一遍，在gpt的帮助下通读一遍代码，至少要知道各级文件之间的联系、某项具体功能由哪些文件负责，在了解这些之后再去有的放矢地修改。</p><p>本文会按顺序对以下重点文件进行分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line">项目根目录/</span><br><span class="line">├── source/</span><br><span class="line">│      ├── _data/</span><br><span class="line">│      ├── _posts/</span><br><span class="line">│      ├── categories/ 等</span><br><span class="line">│      └── css/</span><br><span class="line">└── themes/</span><br><span class="line">        └── butterfly/</span><br><span class="line">              └── layout/</span><br><span class="line">              └── source/</span><br></pre></td></tr></table></figure></blockquote><h1 id="项目根目录"><a href="#项目根目录" class="headerlink" title="项目根目录"></a>项目根目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line">项目根目录/</span><br><span class="line">├── .deploy_git/</span><br><span class="line">├── .github/</span><br><span class="line">├── node_modules/</span><br><span class="line">├── scaffolds/</span><br><span class="line">├── source/                      &lt;-- 重点关注</span><br><span class="line">│    ├── _posts/</span><br><span class="line">│    │   └── ... （博客文章）</span><br><span class="line">│    └── ... （其他资源文件）</span><br><span class="line">├── themes/                      &lt;-- 重点关注</span><br><span class="line">│    └── butterfly/ （Butterfly主题）</span><br><span class="line">├── .gitignore</span><br><span class="line">├── _config.butterfly.yml        &lt;-- 重点关注</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml                  &lt;-- 重点关注</span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br></pre></td></tr></table></figure><h2 id="需要重点关注的文件"><a href="#需要重点关注的文件" class="headerlink" title="需要重点关注的文件"></a>需要重点关注的文件</h2><h3 id="source-文件夹"><a href="#source-文件夹" class="headerlink" title="source 文件夹"></a>source 文件夹</h3><p>这个文件夹是 <strong>Hexo 博客内容的主要存放地</strong>，包括你所有的 Markdown 文件（博客文章）、资源文件（如图片、视频等）以及其他静态文件。默认情况下，Hexo 会将这个文件夹中的内容解析并生成静态网页。</p><h3 id="themes-文件夹"><a href="#themes-文件夹" class="headerlink" title="themes 文件夹"></a>themes 文件夹</h3><p>这个文件夹包含<strong>博客使用的主题</strong>。每个主题都会有一个独立的子文件夹，包含该主题的布局、样式、脚本和其他资源文件。Butterfly 主题通常会在这里有一个名为 butterfly 的子文件夹。</p><h3 id="config-butterfly-yml"><a href="#config-butterfly-yml" class="headerlink" title="_config.butterfly.yml"></a>_config.butterfly.yml</h3><p>这个文件是 <strong>Butterfly 主题的配置文件</strong>，用于定义主题的特定设置。可以在这里配置主题的布局、颜色、字体、插件、导航栏等。</p><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>这个文件是 <strong>Hexo 项目的主配置文件</strong>。它定义了整个博客的基本配置，如站点信息（标题、描述、作者等）、URL 设置、目录结构、插件配置等。所有全局性的配置都在这里定义。主要是在_config.butterfly.yml进行修改，较少用到_config.yml文件，<strong>了解即可。</strong></p><h2 id="不需要关注的文件"><a href="#不需要关注的文件" class="headerlink" title="不需要关注的文件"></a>不需要关注的文件</h2><details open style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; display: block; color: rgb(76, 73, 72); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"><summary style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; display: list-item;">点击展开</summary><h3 id="deploy-git-文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#deploy-git-%E6%96%87%E4%BB%B6%E5%A4%B9" class="headerlink" title=".deploy_git 文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a>.deploy_git 文件夹</h3><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;">这个文件夹用于 Hexo 部署功能，通常包含 Git 仓库的相关信息，用于在部署过程中存放生成的静态文件。如果你使用 Git 来部署博客，这个文件夹会存储部署用的 Git 仓库数据。<strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;">一般不需要修改，不用过多关注。</strong></p><h3 id="github-文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#github-%E6%96%87%E4%BB%B6%E5%A4%B9" class="headerlink" title=".github 文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a>.github 文件夹</h3><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;">这个文件夹包含 GitHub 特有的配置文件，如 GitHub Actions 的工作流文件、Issue 模板和 Pull Request 模板等。主要用于自动化工作流的配置以及项目协作相关的模板设置。<strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;">通常不需要修改，除非你需要自定义自动化工作流，不用过多关注。</strong></p><h3 id="node-modules-文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#node-modules-%E6%96%87%E4%BB%B6%E5%A4%B9" class="headerlink" title="node_modules 文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a>node_modules 文件夹</h3><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;">这个文件夹存放项目依赖的所有 Node.js 模块和包。在执行 npm install 后，项目中引用的所有第三方库和工具都会被下载到这个文件夹中，确保项目能够正常运行。<strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;">一般不需要手动修改。</strong></p><h3 id="scaffolds-文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#scaffolds-%E6%96%87%E4%BB%B6%E5%A4%B9" class="headerlink" title="scaffolds 文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a>scaffolds 文件夹</h3><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;">这个文件夹用于存放 Hexo 的脚手架文件。当你新建文章、页面或其他内容时，Hexo 会使用这个文件夹中的模板文件。比如新建一篇博客文章时会应用 post.md 模板。<strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;">除非你需要自定义新建内容的模板，否则不需要修改。</strong></p><h3 id="gitignore-文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#gitignore-%E6%96%87%E4%BB%B6" class="headerlink" title=".gitignore 文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a>.gitignore 文件</h3><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;">这个文件指定 Git 在版本控制时应忽略的文件和目录，避免将不需要的文件（如临时文件、构建输出、敏感信息等）提交到仓库中。<strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;">与网页内容无关。</strong></p><h3 id="config-landscape-yml" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#config-landscape-yml" class="headerlink" title="_config.landscape.yml" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a>_config.landscape.yml</h3><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;">这个文件可能是一个特定配置，用于定义另一种布局或主题的设置。如果你使用多种布局或需要不同的配置，可以通过这种方式进行管理。如果不使用这个配置文件定义的布局或主题，<strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;">可以忽略。</strong></p><h3 id="package-json" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#package-json" class="headerlink" title="package.json" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a>package.json</h3><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;">这个文件是 Node.js 项目的描述文件，包含项目的基本信息（如名称、版本、描述）、依赖项、脚本命令等。通过这个文件，npm 可以管理项目的依赖和运行脚本。<strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;">除非你需要添加新的依赖或修改脚本命令，否则不需要修改。</strong></p><h3 id="package-lock-json" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#package-lock-json" class="headerlink" title="package-lock.json" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a>package-lock.json</h3><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;">这个文件是 package.json 的锁定文件，记录了当前安装的具体版本的依赖树。它确保在不同环境中安装相同的依赖版本，保证项目的一致性和可重复性。<strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;">一般不需要修改。</strong></p></details><h1 id="source目录"><a href="#source目录" class="headerlink" title="source目录"></a>source目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line">项目根目录/source/</span><br><span class="line">├── _date/</span><br><span class="line">│   ├── link.yml #友链数据</span><br><span class="line">│   └── movies.yml #电影数据（影视清单）</span><br><span class="line">├── _posts/ </span><br><span class="line">│   └── ... #博客文章</span><br><span class="line">├── categories/</span><br><span class="line">│   └── ... #分类页面，以下同理，分别为标签、友链、影视等页面</span><br><span class="line">├── tags/</span><br><span class="line">├── link/</span><br><span class="line">├── movies/</span><br><span class="line">├── css/</span><br><span class="line">│   └── ... #自定义CSS文件</span><br><span class="line">└── CNAME #用于自定义域名</span><br></pre></td></tr></table></figure><ul><li><h3 id="date-文件夹"><a href="#date-文件夹" class="headerlink" title="_date 文件夹"></a>_date 文件夹</h3></li></ul><p><strong>通常用于存储自定义数据文件，这些数据可以在生成页面时被模板引用</strong>。如果需要在博客中引用某些固定的数据（如统计数据、表格等），可以将这些数据文件放在这里，并在模板中使用<strong>数据标签</strong>引用。</p><ul><li><h3 id="categories、tags、link等-文件夹"><a href="#categories、tags、link等-文件夹" class="headerlink" title="categories、tags、link等 文件夹"></a>categories、tags、link等 文件夹</h3></li></ul><p>里面都有一个index.md文件用于存放页面，目前里面只有<strong>Page Front-matter</strong>，没有其他内容，猜测这里是<strong>用于设置页面的title和type等</strong>，样式还要在其他地方。至少清单-影视等页面的样式是在css文件夹里。</p><ul><li><h3 id="css-文件夹"><a href="#css-文件夹" class="headerlink" title="css 文件夹"></a>css 文件夹</h3></li></ul><p>我用来<strong>存放自定义css文件</strong>的文件夹，前面已经实现的悬停动画（hover_animation.css）、顶部导航栏居中（menu_mid.css）、新文章外挂标签（new_post.css）、隐藏搜索字样（search_hide.css）、调整logo位置（site_icon.css）的功能都在此实现。</p><h1 id="themes-butterfly目录"><a href="#themes-butterfly目录" class="headerlink" title="themes/butterfly目录"></a>themes/butterfly目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line">themes/butterfly/</span><br><span class="line">├── .github/</span><br><span class="line">├── languages/</span><br><span class="line">│   └── ... （多语言支持文件）</span><br><span class="line">├── layout/                       &lt;-- 重点关注</span><br><span class="line">│   └── ... （页面布局文件）</span><br><span class="line">├── scripts/</span><br><span class="line">│   └── ... （自定义脚本文件）</span><br><span class="line">├── source/                       &lt;-- 重点关注</span><br><span class="line">│   └── ... （静态资源文件）</span><br><span class="line">├── _config.yml</span><br><span class="line">├── LICENSE</span><br><span class="line">├── package.json</span><br><span class="line">├── plugins.yml</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h2 id="需要重点关注的文件-1"><a href="#需要重点关注的文件-1" class="headerlink" title="需要重点关注的文件"></a>需要重点关注的文件</h2><ul><li><h3 id="layout文件夹"><a href="#layout文件夹" class="headerlink" title="layout文件夹"></a>layout文件夹</h3></li></ul><p>存放主题的<strong>页面布局</strong>文件。定义了网站各个页面的 HTML 结构，包括头部、脚部、侧边栏等。如果需要修改页面的结构和布局，这里的文件非常重要。</p><ul><li><h3 id="source文件夹"><a href="#source文件夹" class="headerlink" title="source文件夹"></a>source文件夹</h3></li></ul><p>存放主题的<strong>静态资源</strong>文件，如 CSS、JS、图片等。用于主题的样式和行为定义。在这里可以添加或修改 CSS 和 JavaScript 文件，以自定义样式和功能。</p><ul><li><h3 id="scripts文件夹"><a href="#scripts文件夹" class="headerlink" title="scripts文件夹"></a>scripts文件夹</h3></li></ul><p>存放主题的自定义脚本文件。用于添加或修改 JavaScript 功能。如果需要添加复杂的交互功能，可以关注这里的文件。<strong>没有上面两个文件夹重要。</strong></p><h2 id="不需要关注的文件-1"><a href="#不需要关注的文件-1" class="headerlink" title="不需要关注的文件"></a>不需要关注的文件</h2><details style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; display: block; color: rgb(76, 73, 72); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Helvetica Neue&quot;, Lato, Roboto, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"><summary style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; display: list-item;">点击展开</summary><ul style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box;"><li style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 4px 0px;"><h3 id="github-文件夹-1" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#github-%E6%96%87%E4%BB%B6%E5%A4%B9-1" class="headerlink" title=".github/ 文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a></h3></li></ul><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;"></p><ul style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box;"><li style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 4px 0px;"><h3 id="languages-文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#languages-%E6%96%87%E4%BB%B6%E5%A4%B9" class="headerlink" title="languages/ 文件夹" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a></h3></li></ul><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;"><strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;"></strong></p><ul style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box;"><li style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 4px 0px;"><h3 id="config-yml-文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#config-yml-%E6%96%87%E4%BB%B6" class="headerlink" title="_config.yml 文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a></h3></li></ul><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;"><strong style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; font-weight: bolder;"></strong></p><ul style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box;"><li style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 4px 0px;"><h3 id="LICENSE-文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#LICENSE-%E6%96%87%E4%BB%B6" class="headerlink" title="LICENSE 文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a></h3></li></ul><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;"></p><ul style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box;"><li style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 4px 0px;"><h3 id="package-json-文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#package-json-%E6%96%87%E4%BB%B6" class="headerlink" title="package.json 文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a></h3></li></ul><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;"></p><ul style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box;"><li style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 4px 0px;"><h3 id="plugins-yml-文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#plugins-yml-%E6%96%87%E4%BB%B6" class="headerlink" title="plugins.yml 文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a></h3></li></ul><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;"></p><ul style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box;"><li style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 4px 0px;"><h3 id="README-md-文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; position: relative; margin: 20px 0px 14px; color: var(--text-highlight-color); font-weight: bold;"><a href="https://j1nz.cc/posts/f96eff38/index.html#README-md-%E6%96%87%E4%BB%B6" class="headerlink" title="README.md 文件" style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; background-color: transparent; color: rgb(73, 177, 245); text-decoration: none; transition: 0.2s; overflow-wrap: break-word;"></a></h3></li></ul><p style="scrollbar-width: thin; scrollbar-color: var(--scrollbar-color) transparent; box-sizing: border-box; margin: 0px 0px 16px;"></p></details><h1 id="重点内容的完整结构展开"><a href="#重点内容的完整结构展开" class="headerlink" title="重点内容的完整结构展开"></a>重点内容的完整结构展开</h1><p>不再对 themes/butterfly/layout/ 和 themes/butterfly/source/ 进行单独展开分析，在此附上themes目录重点内容的完整结构，此后就开始代码阅读了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">plaintext</span><br><span class="line">项目根目录/</span><br><span class="line">└── themes/</span><br><span class="line">    └── butterfly/</span><br><span class="line">        ├── layout/</span><br><span class="line">        │   ├── archive.pug          // 存档页面布局</span><br><span class="line">        │   ├── category.pug         // 分类页面布局</span><br><span class="line">        │   ├── index.pug            // 主页布局</span><br><span class="line">        │   ├── post.pug             // 单篇文章页面布局</span><br><span class="line">        │   ├── page.pug             // 单独页面布局</span><br><span class="line">        │   ├── tag.pug              // 标签页面布局</span><br><span class="line">        │   └── includes/           // 包含的模板片段</span><br><span class="line">        │       ├── head/                // 头部相关</span><br><span class="line">        │       │   ├── analytics.pug       // 分析工具集成代码</span><br><span class="line">        │       │   ├── config.pug          // 网站配置信息</span><br><span class="line">        │       │   ├── config_site.pug     // 站点具体配置信息</span><br><span class="line">        │       │   ├── google_adsense.pug  // Google AdSense 广告集成代码</span><br><span class="line">        │       │   ├── open_graph.pug      // Open Graph 协议元数据</span><br><span class="line">        │       │   ├── preconnect.pug      // 预连接设置</span><br><span class="line">        │       │   ├── pwa.pug             // 渐进式 Web 应用配置</span><br><span class="line">        │       │   └── site_verification.pug  // 网站验证代码</span><br><span class="line">        │       ├── header/           // 头部布局</span><br><span class="line">        │       │   ├── index.pug           // 头部主要布局</span><br><span class="line">        │       │   ├── menu_item.pug       // 菜单项布局</span><br><span class="line">        │       │   ├── nav.pug             // 导航栏布局</span><br><span class="line">        │       │   ├── post-info.pug       // 文章信息显示布局</span><br><span class="line">        │       │   └── social.pug          // 社交分享按钮布局</span><br><span class="line">        │       ├── loading/          // 加载效果布局</span><br><span class="line">        │       │   ├── fullpage-loading.pug    // 全屏加载效果布局</span><br><span class="line">        │       │   ├── index.pug               // 加载效果主要布局</span><br><span class="line">        │       │   └── pace.pug                // Pace 加载条效果集成</span><br><span class="line">        │       ├── mixins/           // 混合模板</span><br><span class="line">        │       │   ├── article-sort.pug        // 文章排序 mixins</span><br><span class="line">        │       │   └── post-ui.pug             // 文章界面 mixins</span><br><span class="line">        │       ├── page/             // 页面布局</span><br><span class="line">        │       │   ├── categories.pug          // 分类页面布局</span><br><span class="line">        │       │   ├── default-page.pug        // 默认页面布局</span><br><span class="line">        │       │   ├── flink.pug               // 友情链接页面布局</span><br><span class="line">        │       │   ├── movies.pug              // 电影页面布局</span><br><span class="line">        │       │   └── tags.pug                // 标签页面布局</span><br><span class="line">        │       ├── post/             // 文章布局</span><br><span class="line">        │       │   ├── post-copyright.pug      // 文章版权信息布局</span><br><span class="line">        │       │   └── reward.pug              // 打赏功能布局</span><br><span class="line">        │       ├── widget/           // 小部件布局</span><br><span class="line">        │       │   ├── card_ad.pug             // 广告卡片布局</span><br><span class="line">        │       │   ├── card_announcement.pug   // 公告卡片布局</span><br><span class="line">        │       │   ├── card_archives.pug       // 归档卡片布局</span><br><span class="line">        │       │   ├── card_author.pug         // 作者卡片布局</span><br><span class="line">        │       │   ├── card_bottom_self.pug    // 底部自定义卡片布局</span><br><span class="line">        │       │   ├── card_categories.pug     // 分类卡片布局</span><br><span class="line">        │       │   ├── card_newest_comment.pug // 最新评论卡片布局</span><br><span class="line">        │       │   ├── card_post_series.pug    // 文章系列卡片布局</span><br><span class="line">        │       │   ├── card_post_toc.pug       // 文章目录卡片布局</span><br><span class="line">        │       │   ├── card_recent_post.pug    // 最近文章卡片布局</span><br><span class="line">        │       │   ├── card_tags.pug           // 标签卡片布局</span><br><span class="line">        │       │   ├── card_top_self.pug       // 顶部自定义卡片布局</span><br><span class="line">        │       │   ├── card_webinfo.pug        // 网页信息卡片布局</span><br><span class="line">        │       │   └── index.pug               // 小部件索引布局</span><br><span class="line">        │       ├── third-party/      // 第三方插件（未展开）</span><br><span class="line">        │       ├── layout.pug        // 整体页面布局模板</span><br><span class="line">        │       ├── pagination.pug    // 分页控件模板</span><br><span class="line">        │       ├── rightside.pug     // 页面右侧栏布局</span><br><span class="line">        │       ├── sidebar.pug       // 侧边栏布局</span><br><span class="line">        │       ├── 404.pug           // 404 错误页面布局</span><br><span class="line">        │       ├── additional-js.pug // 附加的 JavaScript 文件引入布局</span><br><span class="line">        │       ├── footer.pug        // 网页页脚布局</span><br><span class="line">        │       └── head.pug          // 网页头部布局</span><br><span class="line">        ├── source/               // 主题的源代码文件夹</span><br><span class="line">        │   ├── css/</span><br><span class="line">        │   │   ├── _global/</span><br><span class="line">        │   │   │   ├── function.styl   // 全局功能样式</span><br><span class="line">        │   │   │   └── index.styl      // 全局样式入口文件</span><br><span class="line">        │   │   ├── _highlight/           // 代码高亮样式文件夹（未展开）</span><br><span class="line">        │   │   ├── _layout/</span><br><span class="line">        │   │   │   ├── aside.styl         // 侧边栏样式</span><br><span class="line">        │   │   │   ├── chat.styl          // 聊天框样式</span><br><span class="line">        │   │   │   ├── comment.styl       // 评论框样式</span><br><span class="line">        │   │   │   ├── footer.styl        // 底部样式</span><br><span class="line">        │   │   │   ├── head.styl          // 头部样式</span><br><span class="line">        │   │   │   ├── loading.styl       // 加载效果样式</span><br><span class="line">        │   │   │   ├── pagination.styl    // 分页样式</span><br><span class="line">        │   │   │   ├── post.styl          // 文章样式</span><br><span class="line">        │   │   │   ├── relatedposts.styl  // 相关文章样式</span><br><span class="line">        │   │   │   ├── reward.styl        // 打赏功能样式</span><br><span class="line">        │   │   │   ├── rightside.styl     // 右侧栏样式</span><br><span class="line">        │   │   │   ├── sidebar.styl       // 侧边栏样式</span><br><span class="line">        │   │   │   └── third-party/       // 第三方插件样式文件夹（未展开）</span><br><span class="line">        │   │   ├── _mode/</span><br><span class="line">        │   │   │   ├── darkmode.styl   // 暗黑模式样式</span><br><span class="line">        │   │   │   └── readmode.styl   // 阅读模式样式</span><br><span class="line">        │   │   ├── _page/</span><br><span class="line">        │   │   │   ├── 404.styl          // 404 页面样式</span><br><span class="line">        │   │   │   ├── archives.styl     // 归档页面样式</span><br><span class="line">        │   │   │   ├── categories.styl   // 分类页面样式</span><br><span class="line">        │   │   │   ├── common.styl       // 公共页面样式</span><br><span class="line">        │   │   │   ├── flink.styl        // 友情链接页面样式</span><br><span class="line">        │   │   │   ├── homepage.styl     // 主页样式</span><br><span class="line">        │   │   │   └── tags.styl         // 标签页面样式（未展开）</span><br><span class="line">        │   │   ├── _search/</span><br><span class="line">        │   │   │   ├── algolia.styl   // Algolia 搜索样式</span><br><span class="line">        │   │   │   ├── index.styl     // 搜索样式入口文件</span><br><span class="line">        │   │   │   └── local-search.styl  // 本地搜索样式</span><br><span class="line">        │   │   └── _tags/</span><br><span class="line">        │   │       ├── button.styl      // 按钮样式</span><br><span class="line">        │   │       ├── gallery.styl     // 图库样式</span><br><span class="line">        │   │       ├── hexo.styl        // Hexo 样式</span><br><span class="line">        │   │       ├── hide.styl        // 隐藏元素样式</span><br><span class="line">        │   │       ├── inlinelmg.styl   // 内联图片样式</span><br><span class="line">        │   │       ├── label.styl       // 标签样式</span><br><span class="line">        │   │       ├── note.styl        // 注释样式</span><br><span class="line">        │   │       ├── tabs.styl        // 标签页样式</span><br><span class="line">        │   │       └── timeline.styl    // 时间线样式</span><br><span class="line">        │   ├── js/</span><br><span class="line">        │   │   ├── search/</span><br><span class="line">        │   │   │   ├── algolia.js       // Algolia 搜索功能</span><br><span class="line">        │   │   │   └── local-search.js  // 本地搜索功能</span><br><span class="line">        │   │   ├── main.js              // 主要 JavaScript 文件</span><br><span class="line">        │   │   ├── tw_cn.js             // 特定语言或地区的 JavaScript 文件</span><br><span class="line">        │   │   └── utils.js             // 工具函数 JavaScript 文件</span><br><span class="line">        │   └── img/                      // 图片文件夹（未展开）</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>通过对项目结构的大致梳理，可以忽略不相关的文件和不重要的文件，按照功能模块按图索骥修改自己想要修改的内容，例如字体、各种颜色、部分样式。这是我阅读的第一个前端项目，对很多基础知识和基本信息完全陌生，因此才有必要进行一次系统性梳理，同时也是某种程度上的纪念意义。如果以后再接触类似项目当然就不需要写笔记来记录架构梳理过程了，那时自然而然很容易就读懂。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在很多功能的实现过程中，我都因为不熟悉项目架构和具体代码而束手无策，尝试很多方法也事倍功半，因此决定在继续搭建博客之前先对butterfly主题的框架梳理一遍，在gpt的帮助下通读一遍代码，至少要知道各级文件之间的联系、某项具体功能由哪些文件负责，在了解这些之后再去有的放矢地修改。&lt;/p&gt;
&lt;p&gt;本文会按顺序对以下重点文件进行分析&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plaintext&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;项目根目录/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── source/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│      ├── _data/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│      ├── _posts/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│      ├── categories/ 等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│      └── css/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── themes/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── butterfly/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              └── layout/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              └── source/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="建站记录" scheme="http://example.com/categories/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="建站记录" scheme="http://example.com/tags/%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2024/12/31/test/"/>
    <id>http://example.com/2024/12/31/test/</id>
    <published>2024-12-30T16:59:14.000Z</published>
    <updated>2025-01-02T13:51:47.320Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ff1ee655a1d96924d978a85b534eb2bb51a4b31472d4aa520ed84f30c137d5a1">1b693c4938223286468132b2f7068bf6dfee07f365da88e0f20fb98ce9ee8b5309d912c7d2cde7e6e94252e09ff51312df1dc91a0156e83f2d9a21ae4e56059cc7677802ad137ed3ee256c0673a721ff1bc69008f172cc79c5a50e3190f485769b3f6d476c849f0d5f8500c76f50acc81df29d0b0c410edcb4bee83a2594c34da64c3de8091617ee9f9e6665aa7942cb07c55e9101ffa696e202671448b9630b624d68af43b74823066a4840cee3626b194a558406dee79c6f58d8e9933f20ceb0b5605f9e57a997c18200d98727d472a845b836bc9321f384b7c275d0922e771c1b5a6c2efa6316cec92911625c0b4f200cd16b7a6f82b2d9463db181dedafc16a1f8417309459ee62b93d0a517bb9a3b4b93a5d2496c6ccefe3882957692629e8108deeb83682ab2fec1fdcd84cf3d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="计算机小知识" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>经典排序算法</title>
    <link href="http://example.com/2024/12/31/algorithm/classical_sort/"/>
    <id>http://example.com/2024/12/31/algorithm/classical_sort/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="经典排序算法"><a href="#经典排序算法" class="headerlink" title="经典排序算法"></a>经典排序算法</h1><p>预定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> Ty int <span class="comment">// 以整型为例</span></span></span><br></pre></td></tr></table></figure><p>交换数据的函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(Ty* elems,<span class="type">int</span> i,<span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">    Ty temp=elems[i];</span><br><span class="line">    elems[i]=elems[j];</span><br><span class="line">    elems[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果确认只用整型数据使用下面的代码会更快，因为减少了函数压栈，也使用了位运算</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWAP_INT(a, b) \</span></span><br><span class="line"><span class="meta">    &#123;                  \</span></span><br><span class="line"><span class="meta">        a = (a) ^ (b); \</span></span><br><span class="line"><span class="meta">        b = (a) ^ (b); \</span></span><br><span class="line"><span class="meta">        a = (a) ^ (b); \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>原理：将一段序列的最大值（最小值）拿到最左边或者最右边的操作，使用循环重复操作，（每轮排序都会少一个最大值或最小值），当最后只剩下一个数据的时候整个序列就已经排好序了。<br>冒泡排序的原理很简单，使用代码实现也很简单。也是所有排序算法里面最简单的一个。<br>具体代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubSort</span><span class="params">(Ty* elems,<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; size;size--) &#123;    <span class="comment">//轮</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; size;j++) &#123;    <span class="comment">//找剩余元素中的最值</span></span><br><span class="line">            <span class="keyword">if</span> (elems[j] &lt; elems[j<span class="number">-1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(elems,j,j<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubSort</span><span class="params">(Ty* elems,<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;size;j++)</span><br><span class="line">            <span class="keyword">if</span>(elems[i]&lt;elems[j])</span><br><span class="line">                <span class="built_in">swap</span>(elems,i,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接使用两层循环去实现，外层循环主要作用是存放最大值或最小值的，内存循环的主要作用是找到发生冲突的元素，如果发生冲突就交换两个数据。当两层循环的结束的时候整个序列就自然排好序了。时间复杂度为O(n^2).</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>原理：基本思想和冒泡排序是一样的，选择排序相对于冒泡排序的优点就是减少交换次数。算法思想都是在序列中找到最大值（最小值），然后存放好下次进入循环就访问不到这个最大值（最小值）。当两层循环都结束的时候序列就自然排好了。<br>具体代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectSort</span><span class="params">(Ty* elems,<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++) &#123;</span><br><span class="line">        <span class="type">int</span> minPos=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;size;j++)</span><br><span class="line">              <span class="keyword">if</span>(elems[minPos]&gt;elems[j])</span><br><span class="line">                minpos=j;</span><br><span class="line">        <span class="built_in">swap</span>(elems,i,minPos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>原理：基本思想还是冒泡排序，不过插入排序是两边相靠的冒泡，所以在序列部分有序的情况下，插入排序的效率要比冒泡排序效率高。从序列的尾部开始往前比较，如果当前的数据小于（大于）前一个的数据就进行交换，否则进入下一次循环，直到外层循环遍历完整个序列就自然排好序了。<br>具体代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用交换函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(Ty* elems,<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; size;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i;j &gt; <span class="number">0</span> &amp;&amp; elems[j<span class="number">-1</span>] &gt; elems[j];j--)</span><br><span class="line">            <span class="built_in">swap</span>(elems,j<span class="number">-1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不使用交换函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertSort</span><span class="params">(Ty* elems,<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt; size;i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i;</span><br><span class="line">        <span class="type">int</span> temp = arr[j];</span><br><span class="line">        <span class="keyword">for</span> (;j &gt;= <span class="number">1</span> &amp;&amp; temp &lt; arr[j<span class="number">-1</span>];j--)</span><br><span class="line">            arr[j] = arr[j<span class="number">-1</span>];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>原理：希尔排序是建立在插入排序的基础上进行优化的排序算法，所以希尔排序又叫做优化版的插入排序。<br>代码实现：</p><ol><li>将间隔定为4</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(Ty* elems,<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> h = <span class="number">4</span>;h &gt;= <span class="number">1</span>;h = h &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h;i &lt; size;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i;j &gt;= h &amp;&amp; elems[j] &gt; elems[j-h];j -= h)</span><br><span class="line">                <span class="built_in">swap</span>(elems,j,j-h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用常用的序列号</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用交换函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(Ty* elems,<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h &lt; size/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h;i &lt; size;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i;j &gt;= h &amp;&amp; elems[j] &gt; elems[j-h];j -= h)</span><br><span class="line">                <span class="built_in">swap</span>(elems,j,j-h);</span><br><span class="line">        h /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不使用交换函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(Ty* elems,<span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> t = length/<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; t) h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h;i &lt; length;i++) &#123;</span><br><span class="line">            <span class="type">int</span> j = h;</span><br><span class="line">            Ty temp = arr[j];</span><br><span class="line">            <span class="keyword">for</span> (;j &gt;= h &amp;&amp; temp &lt; arr[j-h];j-=h)</span><br><span class="line">                arr[j] = arr[j-h];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        h /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 实例解释</span><br><span class="line">size=<span class="number">13</span>,h=<span class="number">4</span> <span class="meta"># h=13/3</span></span><br><span class="line">        h</span><br><span class="line">        |</span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">10</span> <span class="number">0</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line">        ||</span><br><span class="line">        ij</span><br><span class="line"># <span class="number">4</span>&lt;<span class="number">9</span> so i++;j=i</span><br><span class="line">        h</span><br><span class="line">        |</span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">10</span> <span class="number">0</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line">          ||</span><br><span class="line">          ij</span><br><span class="line"># <span class="number">6</span>&gt;<span class="number">5</span> 交换 j-=h</span><br><span class="line">        h</span><br><span class="line">        |</span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">8</span> <span class="number">7</span> <span class="number">9</span> <span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">10</span> <span class="number">0</span> <span class="number">11</span> <span class="number">12</span></span><br><span class="line">  |          |</span><br><span class="line">  j          i</span><br><span class="line"><span class="meta"># j&lt;h i++;j=i</span></span><br><span class="line"># 依此类推</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>原理：快速排序的核心思想是设立一个轴，然后其他数据都和这个轴作比较，最后把轴放在序列的中间，执行完一遍快速排序后左边的数据都比轴小，右边的数据都比轴大。然后递归下去，当递归结束的时候就拍好序了。快速排序的排序很快，但是当数据形成一边倒的情况的时候就发挥不出快速排序的优势。<br>具体代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//稍微修改一下适用于单链表的快速排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(Ty *elems, <span class="type">int</span> first, <span class="type">int</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first &gt;= last || first &lt; <span class="number">0</span> || last &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Ty privot = elems[first];</span><br><span class="line">    <span class="type">int</span> i = first + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j = first + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= last) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elems[j] &lt; privot) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(&amp;elems[i], &amp;elems[j]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(&amp;elems[first], &amp;elems[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">quickSort</span>(elems, first, i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quickSort</span>(elems, i, last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//仅仅适用于数组的快速排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(Ty* elems,<span class="type">int</span> left,<span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> i = left;</span><br><span class="line">    <span class="type">int</span> j = right;</span><br><span class="line">    Ty privot = elems[i];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= privot) --j;</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= privot) ++i;</span><br><span class="line">        arr[j] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = privot;</span><br><span class="line">    <span class="built_in">quickSort</span>(elems,left,i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">quickSort</span>(elems,i + <span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>原理：把要排序的序列拆分成多个含有一个数据的序列，然后按照从小到大（从大到小）进行合并，这样就自然的将无序的序列排好序。<br>具体代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right,<span class="type">int</span>* temp)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = left;</span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k = left;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) temp[k++] = arr[i] &lt; arr[j] ? arr[i++] : arr[j++];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) temp[k++] = arr[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) temp[k++] = arr[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = left;i &lt;= right;i++)</span><br><span class="line">        arr[i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span>* temp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">merge_sort</span>(arr,left,mid,temp);</span><br><span class="line">    <span class="built_in">merge_sort</span>(arr,mid + <span class="number">1</span>,right,temp);</span><br><span class="line">    <span class="built_in">merge</span>(arr,left,mid,right,temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* temp = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)*length);</span><br><span class="line">    <span class="built_in">assert</span>(temp);</span><br><span class="line">    <span class="built_in">merge_sort</span>(arr,<span class="number">0</span>,length - <span class="number">1</span>,temp);</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆分有小顶堆和大顶堆，而堆排序又分有外堆和内堆。</p><ul><li>外堆<br>意思是，而外申请一段和原来数组一样大的内存大小，并将数组的元素构造成小顶堆或大顶堆。根据排序的顺序和逆序确定要构成的堆结构是大顶堆还是小顶堆。现以最终序列是顺序排序（从小到大）为例，则需要构成的堆结构是小顶堆。因为小顶堆可以快速的找到序列的最小值，如果将小顶堆的数据依次弹出，则每次弹的都是剩余序列的最小值，并且每次弹出就放到原来的数组中，当小顶堆里的数据都弹出来完了，原来的数组也自然有序了。如果要求最终序列是逆序的则构造的堆结构是大顶堆，然后操作是一样的。时间复杂度是O(nlogn). 空间复杂度是O(n).</li><li>内堆<br>意思是，不需要额外申请空间，直接在原来的数组上进行操作。现以最终序列是顺序排序（从小到大）为例，则需要构成的堆结构是大顶堆。在原来的数组上构造堆结构称之为 “堆化” ，heapify.形成大顶堆后，将堆顶依次弹出并立即放数组的尾部，反复操作此步骤直到最后一个数据，最终自然形成从小到大依次排好序。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外堆</span></span><br><span class="line"><span class="comment">//堆的结构体描述</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">    Ty* root;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125;Heap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建堆内存</span></span><br><span class="line"><span class="function">Heap* <span class="title">creatHeap</span><span class="params">(<span class="type">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    Heap* heap = (Heap*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Heap));</span><br><span class="line">    <span class="built_in">assert</span>(heap);</span><br><span class="line">    heap-&gt;root = (Ty*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Ty) * (capacity<span class="number">+1</span>) );</span><br><span class="line">    heap-&gt;size = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> heap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入堆</span></span><br><span class="line"><span class="comment">//先将要插入的数据插入到堆的尾部，然后向上渗透，爬到对应的位置，就把数据放进去即可</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushHeap</span><span class="params">(Heap* heap,Ty data)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> current = heap-&gt;size++;</span><br><span class="line">    <span class="type">int</span> parent  = current &gt;&gt; <span class="number">1</span>; </span><br><span class="line">    heap-&gt;root[current] = data;</span><br><span class="line">    <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap-&gt;root[current] &lt; heap-&gt;root[parent]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap-&gt;root,current,parent);    </span><br><span class="line">            current = parent;</span><br><span class="line">            parent &gt;&gt;= <span class="number">1</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出堆</span></span><br><span class="line"><span class="comment">//先将堆顶元素保存下来，然后使用堆的尾部覆盖堆顶，然后往下渗透，走到对应的位置，就把数据放进去，然后返回保存的元素</span></span><br><span class="line"><span class="function">Ty <span class="title">popHeap</span><span class="params">(Heap* heap)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> current = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> rchild  = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> n = --heap-&gt;size;</span><br><span class="line">    Ty ret = heap-&gt;root[<span class="number">1</span>];</span><br><span class="line">    heap-&gt;root[<span class="number">1</span>] = heap-&gt;root[n];</span><br><span class="line">    <span class="keyword">while</span> (rchild &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> small = heap-&gt;root[rchild - <span class="number">1</span>] &lt; heap-&gt;root[rchild] ? rchild - <span class="number">1</span> : rchild;</span><br><span class="line">        <span class="keyword">if</span> (heap-&gt;root[small] &lt; heap-&gt;root[current]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap-&gt;root,current,small);</span><br><span class="line">            current = small;</span><br><span class="line">            rchild  = (current &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//内堆</span></span><br><span class="line"><span class="comment">//在原来数组的基础上直接操作，其实就是入堆和出队直接结合，不需要额外申请空间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapify</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> current,<span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> rchild = (current &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> large;</span><br><span class="line">    <span class="keyword">while</span> (rchild &lt;= length &amp;&amp; (arr[large = rchild == length ? rchild<span class="number">-1</span> : (arr[rchild<span class="number">-1</span>] &gt; arr[rchild] ? rchild<span class="number">-1</span> : rchild)] &gt; arr[current])) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr,large,current);</span><br><span class="line">        current = large;</span><br><span class="line">        rchild  = (current &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> current = length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (current &gt;= <span class="number">0</span>) <span class="built_in">heapify</span>(arr,current--,length);</span><br><span class="line">    <span class="keyword">while</span> (length) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr,<span class="number">0</span>,--length);</span><br><span class="line">        <span class="built_in">heapify</span>(arr,<span class="number">0</span>,length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>前面的算法都是基于比较的排序，计数排序是利用了数组的下标天然有序原理进行排序，所以计数排序是基于统计而排序的排序算法。算法的核心思想是遍历一个无序数组，将遍历到的数据按它的数值找到统计数组的对应下标将其放入统计数组中，依次类推，直到无序的数组的每一个数据都被遍历完之后统计数组也已经初始化完毕，接下来就是遍历统计数组如果遍历到的空间是大于零的就将其下标存入原来的数组中，直到统计数组被遍历完，最终可以排好序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">countSort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> length,<span class="type">int</span> max)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>* count = (<span class="type">int</span>*)<span class="built_in">calloc</span>(max,<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; length;i++) &#123;</span><br><span class="line">        count[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; max;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (count[i]--)</span><br><span class="line">            arr[j++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>桶排序的思想，按照数字的位数进行排序，准备0-9的链式队列，从低位开始到高位进行排序，当最高位被排好序后原来的序列自然排好序了。<br>例如：对以下序列进行基数排序<br>578，234，86，432，512，618，384<br>排序过程：<br>第一轮（在第零轮的基础上按位排在第零轮的基础上按位排在第零轮的基础上按100位排）：432，512，234，384，86，578，618<br>第二轮（在第一轮的基础上按位排在第一轮的基础上按位排在第一轮的基础上按101位排）：512，618，432，234，578，384，86<br>第三轮（在第二轮的基础上按位排在第二轮的基础上按位排在第二轮的基础上按102位排）：86，234，384，432，512，578，618<br>第三轮结束序列自然排好序。<strong>86不够3位数，就往前面补零，即86 = 086</strong>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">redixSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">int</span> ii;</span><br><span class="line">    <span class="type">int</span> jj;</span><br><span class="line">    <span class="type">int</span> temp[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (ii = <span class="number">0</span>; ii &lt; <span class="number">10</span>; ii++)</span><br><span class="line">        <span class="keyword">for</span> (jj = <span class="number">0</span>; jj &lt; <span class="number">10</span>; jj++)</span><br><span class="line">            temp[ii][jj] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">10</span>; k &lt; <span class="number">10000</span>; k *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> index = (arr[i] % k) / (k / <span class="number">10</span>);</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (temp[index][j] != <span class="number">-1</span>)</span><br><span class="line">                j++;</span><br><span class="line">            temp[index][j] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ii = <span class="number">0</span>; ii &lt; <span class="number">10</span>; ii++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (jj = <span class="number">0</span>; jj &lt; length &amp;&amp; temp[ii][jj] != <span class="number">-1</span>; jj++) &#123;</span><br><span class="line">                arr[i++] = temp[ii][jj];</span><br><span class="line">                temp[ii][jj] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;经典排序算法&quot;&gt;&lt;a href=&quot;#经典排序算法&quot; class=&quot;headerlink&quot; title=&quot;经典排序算法&quot;&gt;&lt;/a&gt;经典排序算法&lt;/h1&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="http://example.com/2024/12/31/algorithm/tree/"/>
    <id>http://example.com/2024/12/31/algorithm/tree/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.069Z</updated>
    
    <content type="html"><![CDATA[<p><strong>7-1 根据后序和中序遍历输出前序遍历</strong></p><p>分数 25</p><p>作者 DS课程组</p><p>单位 浙江大学</p><p>本题要求根据给定的一棵二叉树的后序遍历和中序遍历结果，输出该树的前序遍历结果。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>第一行给出正整数 <em>n</em> (≤30)，是树中结点的个数。随后两行，每行给出 <em>n</em> 个整数，分别对应后序遍历和中序遍历结果，数字间以空格分隔。题目保证输入正确对应一棵二叉树。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出<code>Preorder:</code>以及该树的前序遍历结果。数字间有1个空格，行末不得有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2 3 1 5 7 6 4</span><br><span class="line">1 2 3 4 5 6 7</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Preorder: 4 1 3 2 6 5 7</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">TreeNode* lchild;</span><br><span class="line">TreeNode* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TreeNode* <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>* inorder, <span class="type">int</span>* postorder, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">preorderTraversal</span><span class="params">(TreeNode* T)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">TreeNode* T;</span><br><span class="line"><span class="type">int</span> n, i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="type">int</span>* inorder = new <span class="type">int</span>[n];</span><br><span class="line"><span class="type">int</span>* postorder = new <span class="type">int</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; postorder[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; inorder[i];</span><br><span class="line">&#125;</span><br><span class="line">    T = buildTree(inorder, postorder, n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Preorder:&quot;</span>;</span><br><span class="line">preorderTraversal(T);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode* <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>* inorder, <span class="type">int</span>* postorder, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">TreeNode* T;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!n) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T = new TreeNode;</span><br><span class="line">T-&gt;val = postorder[n - <span class="number">1</span>];</span><br><span class="line">T-&gt;lchild = T-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (inorder[i] == postorder[n - <span class="number">1</span>]) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;lchild = buildTree(inorder, postorder, i);</span><br><span class="line">T-&gt;rchild = buildTree(inorder + i + <span class="number">1</span>, postorder + i, n - i - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出前序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">preorderTraversal</span><span class="params">(TreeNode* T)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!T) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; T-&gt;val;</span><br><span class="line">preorderTraversal(T-&gt;lchild);</span><br><span class="line">preorderTraversal(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>123</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;7-1 根据后序和中序遍历输出前序遍历&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/binary_tree/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/binary_tree/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-1-根据后序和中序遍历输出前序遍历"><a href="#7-1-根据后序和中序遍历输出前序遍历" class="headerlink" title="7-1 根据后序和中序遍历输出前序遍历"></a>7-1 根据后序和中序遍历输出前序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">TreeNode* lchild;</span><br><span class="line">TreeNode* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="type">int</span>* inorder, <span class="type">int</span>* postorder, <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode* T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">TreeNode* T;</span><br><span class="line"><span class="type">int</span> n, i;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span>* inorder = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="type">int</span>* postorder = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; postorder[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; inorder[i];</span><br><span class="line">&#125;</span><br><span class="line">    T = <span class="built_in">buildTree</span>(inorder, postorder, n);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Preorder:&quot;</span>;</span><br><span class="line"><span class="built_in">preorderTraversal</span>(T);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="type">int</span>* inorder, <span class="type">int</span>* postorder, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">TreeNode* T;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!n) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T = <span class="keyword">new</span> TreeNode;</span><br><span class="line">T-&gt;val = postorder[n - <span class="number">1</span>];</span><br><span class="line">T-&gt;lchild = T-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (inorder[i] == postorder[n - <span class="number">1</span>]) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">T-&gt;lchild = <span class="built_in">buildTree</span>(inorder, postorder, i);</span><br><span class="line">T-&gt;rchild = <span class="built_in">buildTree</span>(inorder + i + <span class="number">1</span>, postorder + i, n - i - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出前序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preorderTraversal</span><span class="params">(TreeNode* T)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!T) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; T-&gt;val;</span><br><span class="line"><span class="built_in">preorderTraversal</span>(T-&gt;lchild);</span><br><span class="line"><span class="built_in">preorderTraversal</span>(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-完全二叉树的层序遍历"><a href="#7-2-完全二叉树的层序遍历" class="headerlink" title="7-2 完全二叉树的层序遍历"></a>7-2 完全二叉树的层序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildTree</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span>* tree, <span class="type">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tree[maxn + <span class="number">1</span>];</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">buildTree</span>(<span class="number">1</span>,tree, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123; cout &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line">cout &lt;&lt; tree[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildTree</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span>*tree, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; n) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="built_in">buildTree</span>(<span class="number">2</span> * i, tree, n);</span><br><span class="line"><span class="built_in">buildTree</span>(<span class="number">2</span> * i + <span class="number">1</span>, tree, n);</span><br><span class="line">cin &gt;&gt; tree[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-3-树的同构"><a href="#7-3-树的同构" class="headerlink" title="7-3 树的同构"></a>7-3 树的同构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"><span class="type">char</span> val;</span><br><span class="line"><span class="type">int</span> lchild;</span><br><span class="line"><span class="type">int</span> rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">buildTree</span><span class="params">(TreeNode* T)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOmorphic</span><span class="params">(<span class="type">int</span> r1, <span class="type">int</span> r2)</span></span>;</span><br><span class="line"></span><br><span class="line">TreeNode tree1[maxn], tree2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> root1, root2;</span><br><span class="line">root1 = <span class="built_in">buildTree</span>(tree1);</span><br><span class="line">root2 = <span class="built_in">buildTree</span>(tree2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isOmorphic</span>(root1, root2))&#123; cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建二叉树，返回树根，空树树根为-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">buildTree</span><span class="params">(TreeNode* T)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, check[maxn];</span><br><span class="line"><span class="type">char</span> cl, cr;</span><br><span class="line"><span class="type">int</span> root, i;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (n) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123; check[i] = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; T[i].val &gt;&gt; cl &gt;&gt; cr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cl != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">T[i].lchild = cl - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">check[T[i].lchild] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; T[i].lchild = <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cr != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">T[i].rchild = cr - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">check[T[i].rchild] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; T[i].rchild = <span class="number">-1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回根节点</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (check[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">root = i;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isOmorphic</span><span class="params">(<span class="type">int</span> r1, <span class="type">int</span> r2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r1 == <span class="number">-1</span> &amp;&amp; r2 == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((r1 == <span class="number">-1</span> &amp;&amp; r2 != <span class="number">-1</span>) || (r1 != <span class="number">-1</span> &amp;&amp; r2 == <span class="number">-1</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tree1[r1].val != tree2[r2].val) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isOmorphic</span>(tree1[r1].lchild, tree2[r2].lchild) &amp;&amp; <span class="built_in">isOmorphic</span>(tree1[r1].rchild, tree2[r2].rchild)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isOmorphic</span>(tree1[r1].lchild, tree2[r2].rchild) &amp;&amp; <span class="built_in">isOmorphic</span>(tree1[r1].rchild, tree2[r2].lchild)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树的结构"><a href="#二叉搜索树的结构" class="headerlink" title="二叉搜索树的结构"></a>二叉搜索树的结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> T, n, m; <span class="comment">// 定义变量T（测试用例数），n（节点数），m（查询数）</span></span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"><span class="type">int</span> x, lchild, rchild;</span><br><span class="line"><span class="type">int</span> flor;<span class="comment">// 节点的层数（深度）</span></span><br><span class="line"><span class="type">int</span> father;</span><br><span class="line">&#125;;</span><br><span class="line">TreeNode node[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先搜索插入节点的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; node[u].x) &#123;</span><br><span class="line"><span class="comment">// 如果x小于当前节点u的值，那么在u的左子树中</span></span><br><span class="line"><span class="keyword">if</span> (!node[u].lchild) &#123;<span class="comment">//u没有左儿子，就让x作为左儿子</span></span><br><span class="line">cnt++;</span><br><span class="line">node[u].lchild = cnt;</span><br><span class="line">node[cnt].x = x;</span><br><span class="line">node[cnt].father = u;</span><br><span class="line">node[cnt].flor = node[u].flor + <span class="number">1</span>;</span><br><span class="line">mp[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//有左儿子就递归到左儿子</span></span><br><span class="line"><span class="built_in">dfs</span>(x, node[u].lchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// x在u的右子树中</span></span><br><span class="line"><span class="keyword">if</span> (!node[u].rchild) &#123;<span class="comment">//u没有y右儿子，就让x作为左儿子</span></span><br><span class="line">cnt++;</span><br><span class="line">node[u].rchild = cnt;</span><br><span class="line">node[cnt].x = x;</span><br><span class="line">node[cnt].father = u;</span><br><span class="line">node[cnt].flor = node[u].flor + <span class="number">1</span>;</span><br><span class="line">mp[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//有左儿子就递归到左儿子</span></span><br><span class="line"><span class="built_in">dfs</span>(x, node[u].rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x; cin &gt;&gt; x;<span class="comment">//先确认根节点</span></span><br><span class="line">node[<span class="number">1</span>].x = x;</span><br><span class="line">node[<span class="number">1</span>].flor = <span class="number">1</span>;</span><br><span class="line">mp[x] = <span class="number">1</span>;<span class="comment">//更新映射，将根节点值映射到索引1</span></span><br><span class="line">cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从第二个结点开始插入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">dfs</span>(x, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin, s); <span class="comment">//读取剩余行（防止读取到空行）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">getline</span>(cin, s); <span class="comment">// 读取查询语句</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;root&quot;</span>) != s.npos) &#123;</span><br><span class="line"><span class="built_in">sscanf</span>(s.<span class="built_in">c_str</span>(), <span class="string">&quot;%d is the root&quot;</span>, &amp;x);<span class="comment">// 从查询中解析出x</span></span><br><span class="line"><span class="keyword">if</span> (mp[x] == <span class="number">1</span>) &#123; cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;siblings&quot;</span>) != s.npos) &#123;</span><br><span class="line"><span class="built_in">sscanf</span>(s.<span class="built_in">c_str</span>(), <span class="string">&quot;%d and %d are siblings&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">x = mp[x]; y = mp[y];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!x || !y) &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node[x].father != node[y].father) &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;parent&quot;</span>) != s.npos) &#123;</span><br><span class="line"><span class="built_in">sscanf</span>(s.<span class="built_in">c_str</span>(), <span class="string">&quot;%d is the parent of %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">x = mp[x]; y = mp[y];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!x || !y) &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node[y].father == x) &#123; cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;left&quot;</span>) != s.npos) &#123;</span><br><span class="line"><span class="built_in">sscanf</span>(s.<span class="built_in">c_str</span>(), <span class="string">&quot;%d is the left child of %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">x = mp[x]; y = mp[y];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!x || !y) &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(node[y].lchild == x)&#123; cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;right&quot;</span>) != s.npos) &#123;</span><br><span class="line"><span class="built_in">sscanf</span>(s.<span class="built_in">c_str</span>(), <span class="string">&quot;%d is the right child of %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">x = mp[x]; y = mp[y];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!x || !y) &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node[y].rchild == x) &#123; cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="string">&quot;level&quot;</span>) != s.npos) &#123;</span><br><span class="line"><span class="built_in">sscanf</span>(s.<span class="built_in">c_str</span>(), <span class="string">&quot;%d and %d are on the same level&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">x = mp[x]; y = mp[y];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!x || !y) &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node[x].flor == node[y].flor) &#123; cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;7-1-根据后序和中序遍历输出前序遍历&quot;&gt;&lt;a href=&quot;#7-1-根据后序和中序遍历输出前序遍历&quot; class=&quot;headerlink&quot; title=&quot;7-1 根据后序和中序遍历输出前序遍历&quot;&gt;&lt;/a&gt;7-1 根据后序和中序遍历输出前序遍历&lt;/h3&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>二叉树说明</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/binary_tree_explain/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/binary_tree_explain/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历？"><a href="#已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历？" class="headerlink" title="已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历？"></a>已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历？</h2><p>对一棵二叉树进行遍历，我们可以采取3中顺序进行遍历，分别是前序遍历、中序遍历和后序遍历。这三种方式是以访问父节点的顺序来进行命名的。假设父节点是N，左节点是L，右节点是R，那么对应的访问遍历顺序如下：</p><p>前序遍历    N－&gt;L－&gt;R<br>中序遍历    L－&gt;N－&gt;R<br>后序遍历    L－&gt;R－&gt;N</p><p>所以，对于以下这棵树，三种遍历方式的结果是：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e1d5be45e572fa0202cdd7b2dd73afb1.png" alt="img"></p><ul><li>前序遍历    ABCDEF</li><li>中序遍历    CBDAEF</li><li>后序遍历    CDBFEA</li></ul><h2 id="已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历"><a href="#已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历" class="headerlink" title="已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历"></a>已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历</h2><p>+++</p><p>其实，只要知道其中任意两种遍历的顺序，我们就可以推断出剩下的一种遍历方式的顺序，这里我们只是以：知道前序遍历和中序遍历，推断后序遍历作为例子，其他组合方式原理是一样的。要完成这个任务，我们首先要利用以下几个特性：</p><ul><li><p>特性A，对于前序遍历，第一个肯定是根节点；</p></li><li><p>特性B，对于后序遍历，最后一个肯定是根节点；</p></li><li><p>特性C，利用前序或后序遍历，确定根节点，在中序遍历中，根节点的两边就可以分出左子树和右子树；</p></li><li><p>特性D，对左子树和右子树分别做前面3点的分析和拆分，相当于做递归，我们就可以重建出完整的二叉树；</p></li></ul><p>我们以一个例子做一下这个过程，假设：</p><ul><li>前序遍历的顺序是: CABGHEDF</li><li>中序遍历的顺序是: GBHACDEF</li></ul><p>第一步，我们根据特性A，可以得知根节点是C，然后，根据特性C，我们知道左子树是：GHBA，右子树是：DEF。</p><pre><code>                     C                  /     \                GBHA    DEF</code></pre><p>第二步，取出左子树，左子树的前序遍历是：ABGH，中序遍历是：GBHA，根据特性A和C，得出左子树的父节点是A，并且A没有右子树。</p><pre><code>                     C                   /   \                 A      DEF                /              GBH</code></pre><p>第三步，使用同样的方法，前序是BGH，中序是GBH，得出父节点是B，G和H分别是左右节点。</p><pre><code>                  C                /   \               A     DEF              /             B           /   \         G       H</code></pre><p>第四步，回到右子树，它的前序是EDF，中序是DEF，依然根据特性A和C，得出父节点是E，左右节点是D和F。</p><pre><code>                    C                  /   \                 A     E                /     /  \               B     D    F             /  \            G    H</code></pre><p>到此，我们得到了这棵完整的二叉树，因此，它的后序遍历就是：GHBADFEC。</p><p>因此我们按照上面的思路，采用递归的方法建树即可完成，下面给出代码，并有例题，有兴趣者可以去试试！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历？&quot;&gt;&lt;a href=&quot;#已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历？&quot; class=&quot;headerlink&quot; title=&quot;已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历？&quot;&gt;&lt;/a&gt;已知二叉树的前序遍历和中序遍历，如何得到它的后序遍历？&lt;/h2&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/binayr_search_tree/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/binayr_search_tree/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-1-字典合并"><a href="#7-1-字典合并" class="headerlink" title="7-1 字典合并"></a>7-1 字典合并</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;unordered_map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line">// 声明处理字符串的函数</span><br><span class="line">void solve(string&amp; str);</span><br><span class="line"></span><br><span class="line">// 存储解析出的键值对</span><br><span class="line">vector&lt;pair&lt;int, string&gt;&gt; vd;</span><br><span class="line">// 存储键到值的映射</span><br><span class="line">unordered_map&lt;string, int&gt; m;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">    cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line">    string s1, s2; // 用于存储两行输入</span><br><span class="line">    getline(cin, s1); // 读取第一行</span><br><span class="line">    getline(cin, s2); // 读取第二行</span><br><span class="line"></span><br><span class="line">    solve(s1); // 解析第一行</span><br><span class="line">    solve(s2); // 解析第二行</span><br><span class="line"></span><br><span class="line">    // 按照 ASCII 值和字符串排序</span><br><span class="line">    sort(vd.begin(), vd.end());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; &quot;&#123;&quot;; // 输出开始的花括号</span><br><span class="line">    for (int i = 0; i &lt; vd.size(); i++) &#123;</span><br><span class="line">        string s = vd[i].second; // 获取当前元素的字符串</span><br><span class="line">        if (i &gt; 0) &#123; cout &lt;&lt; &quot;,&quot;; &#125; // 如果不是第一个元素，输出逗号</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; &quot;:&quot; &lt;&lt; m[s]; // 输出键和对应的值</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; &quot;&#125;&quot;; // 输出结束的花括号</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解析输入字符串</span><br><span class="line">void solve(string&amp; s) &#123;</span><br><span class="line">    for (int i = 0; i &lt; s.size(); i++) &#123; // 遍历字符串中的每个字符</span><br><span class="line">        if (s[i] == &#x27;:&#x27;) &#123; // 找到键值对的分隔符 &#x27;:&#x27;</span><br><span class="line">            string str; // 用于存储键</span><br><span class="line">            int asc = 0; // 存储键的 ASCII 值</span><br><span class="line">            int sum = 0; // 存储值的总和</span><br><span class="line"></span><br><span class="line">            // 读取键值</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                // 读取字符键</span><br><span class="line">                if (s[i - 1] == &#x27;&quot;&#x27;) &#123; // 如果键是字符串（被引号包围）</span><br><span class="line">                    str += &#x27;&quot;&#x27;; // 添加开头的引号</span><br><span class="line">                    str += s[i - 2]; // 添加字符</span><br><span class="line">                    str += &#x27;&quot;&#x27;; // 添加结尾的引号</span><br><span class="line">                    asc = static_cast&lt;int&gt;(s[i - 2]); // 获取字符的 ASCII 值</span><br><span class="line">                &#125;</span><br><span class="line">                // 读取数字键</span><br><span class="line">                else &#123;</span><br><span class="line">                    int j = i; // j 指向当前 &#x27;:&#x27; 的位置</span><br><span class="line">                    while (s[j - 1] != &#x27;,&#x27; &amp;&amp; s[j - 1] != &#x27;&#123;&#x27;) &#123; // 向前找到数字的开始</span><br><span class="line">                        str += s[j - 1]; // 逐个添加字符</span><br><span class="line">                        j--; // 向前移动</span><br><span class="line">                    &#125;</span><br><span class="line">                    reverse(str.begin(), str.end()); // 反转字符串，获取正确的数字表示</span><br><span class="line">                    asc = stoi(str); // 将字符串转换为整数</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 读取值</span><br><span class="line">                i++; // 移动到值的开始</span><br><span class="line">                while (i &lt; s.size() &amp;&amp; s[i] != &#x27;,&#x27; &amp;&amp; s[i] != &#x27;&#125;&#x27;) &#123; // 读取直到遇到分隔符</span><br><span class="line">                    if (isdigit(s[i])) &#123; // 如果当前字符是数字</span><br><span class="line">                        sum = sum * 10 + (s[i] - &#x27;0&#x27;); // 更新值</span><br><span class="line">                    &#125;</span><br><span class="line">                    i++; // 移动到下一个字符</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 更新映射</span><br><span class="line">                if (m[str]) &#123; // 如果键已经存在</span><br><span class="line">                    m[str] += sum; // 累加值</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    vd.push_back(&#123; asc, str &#125;); // 否则，添加新的键值对</span><br><span class="line">                    m[str] = sum; // 初始化键的值</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-2-这是二叉搜索树吗？"><a href="#7-2-这是二叉搜索树吗？" class="headerlink" title="7-2 这是二叉搜索树吗？"></a>7-2 这是二叉搜索树吗？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;unordered_map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line">typedef struct node &#123;</span><br><span class="line">int val;</span><br><span class="line">node* lchild, * rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void build(node* &amp;T, int data) &#123;</span><br><span class="line">if(T == NULL) &#123;</span><br><span class="line">T = new node; </span><br><span class="line">T-&gt;val = data;</span><br><span class="line">T-&gt;lchild = T-&gt;rchild = NULL;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if (data &lt; T-&gt;val) &#123; build(T-&gt;lchild, data); &#125;</span><br><span class="line">else &#123; build(T-&gt;rchild, data); &#125;</span><br><span class="line">&#125;</span><br><span class="line">//前序遍历二叉树</span><br><span class="line">void preorder(node* T, vector&lt;int&gt;&amp; vi) &#123;</span><br><span class="line">if (T == NULL) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">vi.push_back(T-&gt;val);</span><br><span class="line">preorder(T-&gt;lchild, vi);</span><br><span class="line">preorder(T-&gt;rchild, vi);</span><br><span class="line">&#125;</span><br><span class="line">//得到前序镜像二叉树遍历结果</span><br><span class="line">void pre_mirror(node* T, vector&lt;int&gt;&amp; vi) &#123;</span><br><span class="line">if (T == NULL) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">vi.push_back(T-&gt;val);</span><br><span class="line">pre_mirror(T-&gt;rchild, vi);</span><br><span class="line">pre_mirror(T-&gt;lchild, vi);</span><br><span class="line">&#125;</span><br><span class="line">//得到后序二叉树</span><br><span class="line">void postorder(node* T, vector&lt;int&gt;&amp; vi) &#123;</span><br><span class="line">if (T == NULL) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">postorder(T-&gt;lchild, vi);</span><br><span class="line">postorder(T-&gt;rchild, vi);</span><br><span class="line">vi.push_back(T-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line">//得到后序镜像二叉树遍历结果</span><br><span class="line">void post_mirror(node* T, vector&lt;int&gt;&amp; vi) &#123;</span><br><span class="line">if (T == NULL) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">post_mirror(T-&gt;rchild, vi);</span><br><span class="line">post_mirror(T-&gt;lchild, vi);</span><br><span class="line">vi.push_back(T-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; initial, pre, pre_m, post, post_m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">cout.tie(0);</span><br><span class="line"></span><br><span class="line">int n, data;</span><br><span class="line">node* T = NULL;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; data;</span><br><span class="line">initial.push_back(data);</span><br><span class="line">build(T, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preorder(T, pre);</span><br><span class="line">pre_mirror(T, pre_m);</span><br><span class="line">postorder(T, post);</span><br><span class="line">post_mirror(T,post_m);</span><br><span class="line"></span><br><span class="line">if (initial == pre) &#123;</span><br><span class="line">cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;</span><br><span class="line">for (int i = 0; i &lt; post.size(); i++) &#123;</span><br><span class="line">if (i) &#123; cout &lt;&lt; &quot; &quot;; &#125;</span><br><span class="line">cout &lt;&lt; post[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if (initial == pre_m) &#123;</span><br><span class="line">cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;</span><br><span class="line">for (int i = 0; i &lt; post_m.size(); i++) &#123;</span><br><span class="line">if (i) &#123; cout &lt;&lt; &quot; &quot;; &#125;</span><br><span class="line">cout &lt;&lt; post_m[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; &quot;NO&quot;;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-是否同一棵二叉搜索树"><a href="#7-3-是否同一棵二叉搜索树" class="headerlink" title="7-3 是否同一棵二叉搜索树"></a>7-3 是否同一棵二叉搜索树</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line">// 定义树节点的结构体</span><br><span class="line">typedef struct TreeNode &#123;</span><br><span class="line">    int val; // 节点的值</span><br><span class="line">    TreeNode* lchild, *rchild; // 左右子节点指针</span><br><span class="line">    int flag; // 标记节点是否被访问过</span><br><span class="line">&#125; TreeNode;</span><br><span class="line"></span><br><span class="line">TreeNode* newNode(int v); // 创建新节点并初始化</span><br><span class="line">TreeNode* insert(TreeNode* T, int v); // 在树中插入新值</span><br><span class="line">TreeNode* buildTree(int N); // 根据输入构建树</span><br><span class="line">bool check(TreeNode* T, int v); // 检查值是否在树中</span><br><span class="line">bool judge(TreeNode* T, int N); // 判断给定序列是否在树中</span><br><span class="line">void freeTree(TreeNode* T); // 释放树的内存</span><br><span class="line">void reSet(TreeNode* T); // 重置树的标记</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">    cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line">    int N, L; // N为树节点个数，L为查询序列长度</span><br><span class="line">    TreeNode* T; // 树的根节点</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; N; // 输入节点个数</span><br><span class="line">    while (N) &#123;</span><br><span class="line">        cin &gt;&gt; L; // 输入查询序列的长度</span><br><span class="line">        T = buildTree(N); // 构建树</span><br><span class="line">        for (int i = 0; i &lt; L; i++) &#123;</span><br><span class="line">            if (judge(T, N)) &#123; // 判断查询序列是否在树中</span><br><span class="line">                cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl; // 存在</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                cout &lt;&lt; &quot;No&quot; &lt;&lt; endl; // 不存在</span><br><span class="line">            &#125;</span><br><span class="line">            reSet(T); // 重置树的标记</span><br><span class="line">        &#125;</span><br><span class="line">        freeTree(T); // 释放树的内存</span><br><span class="line">        cin &gt;&gt; N; // 输入下一个节点个数</span><br><span class="line">    &#125;</span><br><span class="line">    return 0; // 程序结束</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建新节点并初始化</span><br><span class="line">TreeNode* newNode(int v) &#123;</span><br><span class="line">    TreeNode* T = new TreeNode;</span><br><span class="line">    T-&gt;flag = 0; // 初始标记为未访问</span><br><span class="line">    T-&gt;val = v; // 设置节点值</span><br><span class="line">    T-&gt;lchild = T-&gt;rchild = NULL; // 左右子节点指针初始化为NULL</span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在树中插入新值</span><br><span class="line">TreeNode* insert(TreeNode* T, int v) &#123;</span><br><span class="line">    if (!T) &#123;</span><br><span class="line">        T = newNode(v); // 如果树为空，创建新节点</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (v &gt; T-&gt;val) &#123;</span><br><span class="line">            T-&gt;rchild = insert(T-&gt;rchild, v); // 插入右子树</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            T-&gt;lchild = insert(T-&gt;lchild, v); // 插入左子树</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return T; // 返回树的根节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 根据输入构建树</span><br><span class="line">TreeNode* buildTree(int N) &#123;</span><br><span class="line">    TreeNode* T;</span><br><span class="line">    int v;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; v; // 读入第一个值</span><br><span class="line">    T = newNode(v); // 创建根节点</span><br><span class="line">    for (int i = 1; i &lt; N; i++) &#123; // 读入剩余值并插入树中</span><br><span class="line">        cin &gt;&gt; v;</span><br><span class="line">        T = insert(T, v);</span><br><span class="line">    &#125;</span><br><span class="line">    return T; // 返回树的根节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 检查值是否在树中</span><br><span class="line">bool check(TreeNode* T, int v) &#123;</span><br><span class="line">    if (T-&gt;flag) &#123; // 如果节点已经被访问过</span><br><span class="line">        if (v &lt; T-&gt;val) &#123; </span><br><span class="line">            return check(T-&gt;lchild, v); // 检查左子树</span><br><span class="line">        &#125; else if (v &gt; T-&gt;val) &#123;</span><br><span class="line">            return check(T-&gt;rchild, v); // 检查右子树</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false; // 值已存在，不允许重复访问</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123; // 如果节点未被访问</span><br><span class="line">        if (v == T-&gt;val) &#123;</span><br><span class="line">            T-&gt;flag = 1; // 标记为已访问</span><br><span class="line">            return true; // 找到值</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false; // 值不匹配</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 判断给定序列是否在树中</span><br><span class="line">bool judge(TreeNode* T, int N) &#123;</span><br><span class="line">    int v, flag = 0; // flag用于标记序列是否存在</span><br><span class="line">    cin &gt;&gt; v; // 读入第一个值</span><br><span class="line">    if (v == T-&gt;val) &#123;</span><br><span class="line">        T-&gt;flag = 1; // 如果匹配，标记为已访问</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        flag = 1; // 不匹配，设置标志</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt; N; i++) &#123; // 继续检查剩余值</span><br><span class="line">        cin &gt;&gt; v;</span><br><span class="line">        if ((!flag) &amp;&amp; (!check(T, v))) &#123; // 如果尚未发现不匹配并且当前值不在树中</span><br><span class="line">            flag = 1; // 设置标志为不匹配</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return flag ? false : true; // 返回是否完全匹配</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 释放树的内存</span><br><span class="line">void freeTree(TreeNode* T) &#123;</span><br><span class="line">    if (T-&gt;lchild) &#123; freeTree(T-&gt;lchild); &#125; // 递归释放左子树</span><br><span class="line">    if (T-&gt;rchild) &#123; freeTree(T-&gt;rchild); &#125; // 递归释放右子树</span><br><span class="line">    free(T); // 释放当前节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 重置树的标记</span><br><span class="line">void reSet(TreeNode* T) &#123;</span><br><span class="line">    if (T-&gt;lchild) &#123; reSet(T-&gt;lchild); &#125; // 递归重置左子树</span><br><span class="line">    if (T-&gt;rchild) &#123; reSet(T-&gt;rchild); &#125; // 递归重置右子树</span><br><span class="line">    T-&gt;flag = 0; // 重置当前节点标记</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;7-1-字典合并&quot;&gt;&lt;a href=&quot;#7-1-字典合并&quot; class=&quot;headerlink&quot; title=&quot;7-1 字典合并&quot;&gt;&lt;/a&gt;7-1 字典合并&lt;/h3&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>笛卡尔树</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/cartesian_tree/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/cartesian_tree/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.089Z</updated>
    
    <content type="html"><![CDATA[<p>笛卡尔树是一种特殊的二叉树，其结点包含两个关键字K1和K2。首先笛卡尔树是关于K1的二叉搜索树，即结点左子树的所有K1值都比该结点的K1值小，右子树则大。其次所有结点的K2关键字满足优先队列（不妨设为最小堆）的顺序要求，即该结点的K2值比其子树中所有结点的K2值小。给定一棵二叉树，请判断该树是否笛卡尔树。</p><p>输入格式:<br>输入首先给出正整数N（≤1000），为树中结点的个数。随后N行，每行给出一个结点的信息，包括：结点的K1值、K2值、左孩子结点编号、右孩子结点编号。设结点从0~(N-1)顺序编号。若某结点不存在孩子结点，则该位置给出−1。</p><p>输出格式:<br>输出YES如果该树是一棵笛卡尔树；否则输出NO。</p><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span> <span class="number">27</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">40</span> <span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">21</span> <span class="number">-1</span> <span class="number">4</span></span><br><span class="line"><span class="number">15</span> <span class="number">22</span> <span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">5</span> <span class="number">35</span> <span class="number">-1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span> <span class="number">27</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">40</span> <span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">11</span> <span class="number">-1</span> <span class="number">4</span></span><br><span class="line"><span class="number">15</span> <span class="number">22</span> <span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">50</span> <span class="number">35</span> <span class="number">-1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k1, k2;</span><br><span class="line"><span class="type">int</span> left, right;</span><br><span class="line">&#125; node[<span class="number">1010</span>];</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> vis[<span class="number">1010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; t;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BST</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node[root].left != <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">BST</span>(node[root].left);</span><br><span class="line">t.<span class="built_in">push_back</span>(node[root].k1);</span><br><span class="line"><span class="keyword">if</span> (node[root].right != <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">BST</span>(node[root].right);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isBST</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">BST</span>(root);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line"><span class="keyword">if</span> (t[i] &gt; t[i + <span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMinHeap</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (node[root].left != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node[node[root].left].k2 &lt; node[root].k2)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">isMinHeap</span>(node[root].left))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node[root].right != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node[node[root].right].k2 &lt; node[root].k2)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">isMinHeap</span>(node[root].right))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; node[i].k1 &gt;&gt; node[i].k2 &gt;&gt; node[i].left &gt;&gt; node[i].right;</span><br><span class="line"><span class="keyword">if</span> (node[i].left != <span class="number">-1</span>)</span><br><span class="line">vis[node[i].left] = <span class="number">1</span>;<span class="comment">//非根节点置1</span></span><br><span class="line"><span class="keyword">if</span> (node[i].right != <span class="number">-1</span>)</span><br><span class="line">vis[node[i].right] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span> (vis[i] == <span class="number">0</span>)</span><br><span class="line">root = i;<span class="comment">//找到根节点编号</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isBST</span>(root) &amp;&amp; <span class="built_in">isMinHeap</span>(root))</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;笛卡尔树是一种特殊的二叉树，其结点包含两个关键字K1和K2。首先笛卡尔树是关于K1的二叉搜索树，即结点左子树的所有K1值都比该结点的K1值小，右子树则大。其次所有结点的K2关键字满足优先队列（不妨设为最小堆）的顺序要求，即该结点的K2值比其子树中所有结点的K2值小。给定一棵二叉树，请判断该树是否笛卡尔树。&lt;/p&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>散列表</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/hash%20table/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/hash%20table/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-1-字符串关键字的散列映射"><a href="#7-1-字符串关键字的散列映射" class="headerlink" title="7-1 字符串关键字的散列映射"></a>7-1 字符串关键字的散列映射</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line">int getHkey(string s, int m);</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">cout.tie(0);</span><br><span class="line"></span><br><span class="line">int N, P, num;</span><br><span class="line">cin &gt;&gt; N &gt;&gt; P;</span><br><span class="line">int Hash[P];</span><br><span class="line">memset(Hash, -1, sizeof(Hash));</span><br><span class="line">map&lt;string, int&gt; m;</span><br><span class="line"></span><br><span class="line">for(int i =0; i &lt; N; i++)&#123;</span><br><span class="line">if(i)&#123;</span><br><span class="line">cout &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">if(m.count(s) == 1)&#123;</span><br><span class="line">cout &lt;&lt; m[s];</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">num = getHkey(s, P);//得到H（Key） </span><br><span class="line">int k = 1, temp = num;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">while(Hash[temp] != -1)&#123;</span><br><span class="line">temp = num;</span><br><span class="line">if(k % 2)&#123;//奇数为正</span><br><span class="line">    temp = (temp + (int)pow((k + 1) /2, 2)) % P;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">temp = (temp - (int)pow((k + 1) /2, 2) + P) % P;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">Hash[temp] = 1;</span><br><span class="line">m[s] = temp;</span><br><span class="line">cout &lt;&lt; temp;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int getHkey(string s, int m)&#123;</span><br><span class="line">reverse(s.begin(), s.end());</span><br><span class="line">int p = 0, sum = 0;</span><br><span class="line">for(int i = 0; i &lt; s.size(); i++)&#123;</span><br><span class="line">sum += (s[i] - &#x27;A&#x27;) * pow(32, p);</span><br><span class="line">p++;</span><br><span class="line">if(p == 3)&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sum % m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-集合的模拟实现（类模板）"><a href="#7-2-集合的模拟实现（类模板）" class="headerlink" title="7-2 集合的模拟实现（类模板）"></a>7-2 集合的模拟实现（类模板）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">class MySet &#123;</span><br><span class="line">public:</span><br><span class="line">MySet() &#123; count = 0; &#125;</span><br><span class="line">int simple_find(T elem);</span><br><span class="line">void addSet(T elem);</span><br><span class="line">void delSet(T elem);</span><br><span class="line">void findElem(T elem);</span><br><span class="line">private:</span><br><span class="line">T data[100];//用数组来存放所有的集合元素，最多不超过100个元素</span><br><span class="line">int count;//表示目前集合中有多少个元素</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//类外成员函数实现 </span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">int MySet&lt;T&gt;::simple_find(T elem) &#123;</span><br><span class="line">for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">if (data[i] == elem) &#123;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void MySet&lt;T&gt;::addSet(T elem) &#123;</span><br><span class="line">if (this-&gt;count &gt;= 100) &#123;</span><br><span class="line">cout &lt;&lt; &quot;Full Set.&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">if (simple_find(elem) == -1) &#123;</span><br><span class="line">cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">data[count++] = elem;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; elem &lt;&lt; &quot; is already exist!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void MySet&lt;T&gt;::delSet(T elem) &#123;</span><br><span class="line">int pos = simple_find(elem);</span><br><span class="line">if (pos == -1) &#123;</span><br><span class="line">cout &lt;&lt; elem &lt;&lt; &quot; is not exist!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">for (int i = pos; i &lt; count - 1; i++) &#123;</span><br><span class="line">data[i] = data[i + 1];</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line">void MySet&lt;T&gt;::findElem(T elem) &#123;</span><br><span class="line">int x = simple_find(elem);</span><br><span class="line">if (x == -1) &#123;</span><br><span class="line">cout &lt;&lt; elem &lt;&lt; &quot; is not exist!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">cout.tie(0);</span><br><span class="line"></span><br><span class="line">MySet&lt;int&gt; inSet;</span><br><span class="line">MySet&lt;double&gt; douSet;</span><br><span class="line">MySet&lt;string&gt; strSet;</span><br><span class="line"></span><br><span class="line">int type;</span><br><span class="line">while (1) &#123;</span><br><span class="line">cin &gt;&gt; type;</span><br><span class="line">if (type == 0) break;</span><br><span class="line"></span><br><span class="line">if (type == 1) &#123;</span><br><span class="line">int ops, x;</span><br><span class="line">cin &gt;&gt; ops &gt;&gt; x;</span><br><span class="line">switch (ops) &#123;</span><br><span class="line">case 1:</span><br><span class="line">inSet.addSet(x);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">inSet.delSet(x);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">inSet.findElem(x);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if (type == 2) &#123;</span><br><span class="line">int ops;</span><br><span class="line">double x;</span><br><span class="line">cin &gt;&gt; ops &gt;&gt; x;</span><br><span class="line">switch (ops) &#123;</span><br><span class="line">case 1:</span><br><span class="line">douSet.addSet(x);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">douSet.delSet(x);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">douSet.findElem(x);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if (type == 3) &#123;</span><br><span class="line">int ops;</span><br><span class="line">string x;</span><br><span class="line">cin &gt;&gt; ops &gt;&gt; x;</span><br><span class="line">switch (ops) &#123;</span><br><span class="line">case 1:</span><br><span class="line">strSet.addSet(x);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">strSet.delSet(x);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">strSet.findElem(x);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-集合相似度"><a href="#7-3-集合相似度" class="headerlink" title="7-3 集合相似度"></a>7-3 集合相似度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">    cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    set&lt;int&gt; s[51];</span><br><span class="line">    int n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int k = 1;</span><br><span class="line">    while (n--) &#123;</span><br><span class="line">        int m;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        while (m--) &#123;</span><br><span class="line">            int x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            s[k].insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    while (n--) &#123;</span><br><span class="line">        int count = 0;</span><br><span class="line">        int a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        int d = s[a].size() + s[b].size();</span><br><span class="line">        for (auto it: s[a]) &#123;</span><br><span class="line">            if (s[b].find(it) != s[b].end()) &#123; count++;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        double p = count * 100.0 / (d - count);//d - count为两个集合的交集</span><br><span class="line">        printf(&quot;%.2f%\n&quot;, p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0; // 程序结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-构造散列表"><a href="#7-4-构造散列表" class="headerlink" title="7-4 构造散列表"></a>7-4 构造散列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">    cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line">    int a1[18], a2[18];</span><br><span class="line">    for (int i = 0; i &lt; 18; i++) &#123; a1[i] = 0; &#125;</span><br><span class="line">    int n, num, temp;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        a2[i] = num;</span><br><span class="line">        temp = num % 17;// 计算 num 的哈希值（模 17）</span><br><span class="line"></span><br><span class="line">        // 哈希冲突</span><br><span class="line">        // 采用线性探测法（每次偏移 5）寻找下一个空位</span><br><span class="line">        while (a1[temp] != 0) &#123;</span><br><span class="line">            temp = (temp + 5) % 18;</span><br><span class="line">        &#125;</span><br><span class="line">        a1[temp] = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        for (int j = 0; j &lt; 18; j++) &#123;</span><br><span class="line">            if (a1[j] != 0 &amp;&amp; a1[j] == a2[i]) &#123;</span><br><span class="line">                cout &lt;&lt; a2[i] &lt;&lt; &quot; pos: &quot; &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0; // 程序结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-整型关键字的平方探测法散列"><a href="#7-5-整型关键字的平方探测法散列" class="headerlink" title="7-5 整型关键字的平方探测法散列"></a>7-5 整型关键字的平方探测法散列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line">bool isPrime(long n) &#123;</span><br><span class="line">    if (n &lt; 2) &#123; return false; &#125;</span><br><span class="line">    for (long i = 2; i * i &lt;= n; i++) &#123;</span><br><span class="line">        if (n % i == 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">    cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line">    int m, n;</span><br><span class="line">    int s, p, v[10007] = &#123; 0 &#125;;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    while (!isPrime(m)) &#123; m++; &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        p = -1;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        for (int j = 0; j &lt; m; j++) &#123;</span><br><span class="line">            //二次探测法查找空位</span><br><span class="line">            if (!v[(s + j * j) % m]) &#123;</span><br><span class="line">                v[(s + j * j) % m] = 1;</span><br><span class="line">                p = (s + j * j) % m;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //输出结果</span><br><span class="line">        if (i) &#123; cout &lt;&lt; &quot; &quot;; &#125;//如果不是第一个输出，先输出空格</span><br><span class="line">        if (p == -1) &#123; cout &lt;&lt; &quot;-&quot;; &#125;</span><br><span class="line">        else &#123; cout &lt;&lt; p; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0; // 程序结束</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;7-1-字符串关键字的散列映射&quot;&gt;&lt;a href=&quot;#7-1-字符串关键字的散列映射&quot; class=&quot;headerlink&quot; title=&quot;7-1 字符串关键字的散列映射&quot;&gt;&lt;/a&gt;7-1 字符串关键字的散列映射&lt;/h3&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/map/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/map/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-1-旅游规划"><a href="#7-1-旅游规划" class="headerlink" title="7-1 旅游规划"></a>7-1 旅游规划</h3><p>有了一张自驾旅游路线图，你会知道城市间的高速公路长度、以及该公路要收取的过路费。现在需要你写一个程序，帮助前来咨询的游客找一条出发地和目的地之间的最短路径。如果有若干条路径都是最短的，那么需要输出最便宜的一条路径。</p><p>输入格式:<br>输入说明：输入数据的第 1 行给出 4 个正整数 n、m、s、d，其中 n（2≤n≤500）是城市的个数，顺便假设城市的编号为 0~(n−1)；m 是高速公路的条数；s 是出发地的城市编号；d 是目的地的城市编号。随后的 m 行中，每行给出一条高速公路的信息，分别是：城市 1、城市 2、高速公路长度、收费额，中间用空格分开，数字均为整数且不超过 500。输入保证解的存在。</p><p>输出格式:<br>在一行里输出路径的长度和收费总额，数字间以空格分隔，输出结尾不能有多余空格。</p><p>输入样例:<br>4 5 0 3<br>0 1 1 20<br>1 3 2 30<br>0 3 4 10<br>0 2 2 20<br>2 3 1 20<br>输出样例:<br>3 40<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line">// 定义图中的边结构体，包含目标城市（to）、路径长度（length）和费用（cost）</span><br><span class="line">typedef struct Edge&#123;</span><br><span class="line">    int to;     // 目标城市</span><br><span class="line">    int length; // 从当前城市到目标城市的路径长度</span><br><span class="line">    int cost;   // 从当前城市到目标城市的费用</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 定义城市状态结构体，包含城市编号、路径长度（dist）和费用（fee）</span><br><span class="line">// 重载了 &gt; 运算符，使得优先队列能根据路径长度和费用优先排序</span><br><span class="line">typedef struct State&#123;</span><br><span class="line">    int city;  // 当前城市</span><br><span class="line">    int dist;  // 从起点到当前城市的路径长度</span><br><span class="line">    int fee;   // 从起点到当前城市的总费用</span><br><span class="line">    </span><br><span class="line">    // 重载大于运算符，首先按照路径长度升序排序，如果路径长度相同则按费用升序排序</span><br><span class="line">    bool operator&gt;(const State&amp; other) const &#123;</span><br><span class="line">        if (dist == other.dist) &#123;</span><br><span class="line">            return fee &gt; other.fee;  // 如果路径长度相同，选择费用较小的路径</span><br><span class="line">        &#125;</span><br><span class="line">        return dist &gt; other.dist;  // 否则选择路径长度较小的</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">    cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line">    int n, m, s, d;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; d;  // 输入城市数 n，道路数 m，起点 s 和终点 d</span><br><span class="line">    </span><br><span class="line">    // 使用邻接表表示图，保存每条边的信息，graph[i] 存储与城市 i 相关的所有边</span><br><span class="line">    vector&lt; vector&lt;Edge&gt; &gt; graph(n);</span><br><span class="line"></span><br><span class="line">    // 输入所有的边信息，构建图</span><br><span class="line">    for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">        int u, v, length, cost;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; length &gt;&gt; cost;</span><br><span class="line">        // 无向图，双向保存每条边</span><br><span class="line">        graph[u].push_back(&#123;v, length, cost&#125;);</span><br><span class="line">        graph[v].push_back(&#123;u, length, cost&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 初始化 Dijkstra 算法所需的数据结构</span><br><span class="line">    vector&lt;int&gt; dist(n, INF); // dist[i] 存储从起点到城市 i 的最短路径长度</span><br><span class="line">    vector&lt;int&gt; fee(n, INF);  // fee[i] 存储从起点到城市 i 的最小费用</span><br><span class="line"></span><br><span class="line">    dist[s] = 0;  // 起点到起点的路径长度是 0</span><br><span class="line">    fee[s] = 0;   // 起点到起点的费用是 0</span><br><span class="line"></span><br><span class="line">    // 优先队列，用于选择当前最优的城市，按照 (路径长度, 费用) 升序排序</span><br><span class="line">    priority_queue&lt;State, vector&lt;State&gt;, greater&lt;State&gt;&gt; pq;</span><br><span class="line">    pq.push(&#123;s, 0, 0&#125;);  // 将起点城市推入队列，初始路径长度和费用都是 0</span><br><span class="line"></span><br><span class="line">    // Dijkstra 算法主体部分</span><br><span class="line">    while (!pq.empty()) &#123;</span><br><span class="line">        State current = pq.top();  // 获取队列中的当前最优城市</span><br><span class="line">        pq.pop();  // 从队列中移除当前城市</span><br><span class="line"></span><br><span class="line">        int u = current.city;  // 当前城市编号</span><br><span class="line"></span><br><span class="line">        // 如果当前城市的路径长度大于已经记录的最短路径长度，或者路径长度相同但费用较大，则跳过</span><br><span class="line">        if (current.dist &gt; dist[u] || (current.dist == dist[u] &amp;&amp; current.fee &gt; fee[u])) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 遍历与当前城市相邻的所有城市</span><br><span class="line">        for (int i = 0; i &lt; graph[u].size(); i++) &#123;</span><br><span class="line">            const Edge&amp; edge = graph[u][i];  // 获取当前边的信息</span><br><span class="line"></span><br><span class="line">            int v = edge.to;              // 目标城市编号</span><br><span class="line">            int newDist = dist[u] + edge.length;  // 通过当前城市到达目标城市的新路径长度</span><br><span class="line">            int newFee = fee[u] + edge.cost;     // 通过当前城市到达目标城市的新费用</span><br><span class="line"></span><br><span class="line">            // 如果新路径长度比原路径长度短，或者路径长度相同但新费用较低，则更新路径信息</span><br><span class="line">            if (newDist &lt; dist[v] || (newDist == dist[v] &amp;&amp; newFee &lt; fee[v])) &#123;</span><br><span class="line">                dist[v] = newDist;  // 更新最短路径长度</span><br><span class="line">                fee[v] = newFee;    // 更新最小费用</span><br><span class="line">                pq.push(&#123;v, newDist, newFee&#125;);  // 将新的城市状态加入队列</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 输出从起点到终点的最短路径长度和最小费用</span><br><span class="line">    cout &lt;&lt; dist[d] &lt;&lt; &quot; &quot; &lt;&lt; fee[d] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="7-2-最短路径-Dijkstra"><a href="#7-2-最短路径-Dijkstra" class="headerlink" title="7-2 最短路径-Dijkstra"></a>7-2 最短路径-Dijkstra</h3><p>城市的道路四通八达，我们经常需要查找从某地出发到其他地方的路径，当然我们希望能最快到达。现得到去每个地方需要花费的时间，现请你编写程序，计算从特定地点出发到所有城市之间的最短时间。</p><p>输入格式:<br>输入的第一行给出城市数目N (1≤N≤10)和道路数目M和1（表示有向图）或0（表示无向图）；</p><p>接下来的M行对应每个城市间来往所需时间，每行给出3个正整数，分别是两个城市的编号（从1编号到N）和来往两城市间所需时间。最后一行给出一个编号，表示从此编号地点出发。</p><p>输出格式:<br>输出从特定地点出发到达所有城市（按编号1-编号N顺序输出）的距离（用编号1-&gt;编号**: 表示 ），如果无路，请输出no path。每个城市占一行。</p><p>输入样例:<br>5 5 1<br>1 2 2<br>1 4 8<br>2 3 16<br>4 3 6<br>5 3 3<br>1<br>输出样例:<br>1-&gt;1:0<br>1-&gt;2:2<br>1-&gt;3:14<br>1-&gt;4:8<br>1-&gt;5:no path<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line"></span><br><span class="line">// 定义结构体 Edge，表示图中的一条边，包含目标城市 city 和边的权重 time</span><br><span class="line">typedef struct Edge &#123;</span><br><span class="line">    int city, time;</span><br><span class="line">    // 重载大于运算符，使优先队列能够按时间升序排列</span><br><span class="line">    bool operator&gt;(const Edge&amp; e) const &#123;</span><br><span class="line">        return time &gt; e.time;  // 按照时间升序排列</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false); // 关闭同步，提升输入输出性能</span><br><span class="line">    cin.tie(0); // 解绑 cin 和 cout，避免不必要的刷新</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line">    int N, M, flag;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M &gt;&gt; flag; // 输入城市数量 N, 道路数量 M 和图的类型标志 flag</span><br><span class="line"></span><br><span class="line">    // 邻接表存储图，adj[i] 代表与城市 i 相连的所有城市及相应的时间</span><br><span class="line">    vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; adj(N + 1);</span><br><span class="line"></span><br><span class="line">    // 输入所有的道路信息，构建图</span><br><span class="line">    for (int i = 0; i &lt; M; i++) &#123;</span><br><span class="line">        int u, v, time;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; time;  // 输入一条道路信息，城市 u 到城市 v 的时间为 time</span><br><span class="line">        adj[u].push_back(&#123; v, time &#125;); // 在城市 u 的邻接表中加入到城市 v 的边</span><br><span class="line">        if (!flag) &#123; // 如果是无向图，则需要将反向的道路添加进去</span><br><span class="line">            adj[v].push_back(&#123; u, time &#125;); // 在城市 v 的邻接表中加入到城市 u 的边</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int start;</span><br><span class="line">    cin &gt;&gt; start; // 输入起始城市 start</span><br><span class="line"></span><br><span class="line">    // 初始化距离数组 dist，表示从起点到各个城市的最短时间，初始值为无穷大</span><br><span class="line">    vector&lt;int&gt; dist(N + 1, INF);</span><br><span class="line">    dist[start] = 0; // 起点到起点的时间是 0</span><br><span class="line"></span><br><span class="line">    // 优先队列，用来实现 Dijkstra 算法的贪心选择</span><br><span class="line">    priority_queue&lt;Edge, vector&lt;Edge&gt;, greater&lt;Edge&gt;&gt; pq;</span><br><span class="line">    pq.push(&#123; start, 0 &#125;); // 将起点加入优先队列</span><br><span class="line"></span><br><span class="line">    // Dijkstra 算法主体部分</span><br><span class="line">    while (!pq.empty()) &#123;</span><br><span class="line">        int u = pq.top().city; // 当前城市 u</span><br><span class="line">        int d = pq.top().time; // 当前城市 u 的最短时间</span><br><span class="line">        pq.pop();</span><br><span class="line"></span><br><span class="line">        // 如果当前时间已经大于之前记录的最短时间，说明这是一个过时的队列元素，可以跳过</span><br><span class="line">        if (d &gt; dist[u]) &#123; continue; &#125;</span><br><span class="line"></span><br><span class="line">        // 遍历所有与当前城市 u 相邻的城市 v</span><br><span class="line">        for (int i = 0; i &lt; adj[u].size(); i++) &#123;</span><br><span class="line">            int v = adj[u][i].first; // 相邻城市 v</span><br><span class="line">            int time = adj[u][i].second; // 当前道路的时间</span><br><span class="line"></span><br><span class="line">            // 如果通过 u 这个城市到达 v 的时间更短，则更新 v 的最短时间</span><br><span class="line">            if (dist[u] + time &lt; dist[v]) &#123;</span><br><span class="line">                dist[v] = dist[u] + time;</span><br><span class="line">                pq.push(&#123; v, dist[v] &#125;); // 将更新后的城市 v 加入队列</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 输出从起点到所有城市的最短时间</span><br><span class="line">    for (int i = 1; i &lt;= N; i++) &#123;</span><br><span class="line">        if (dist[i] == INF) &#123; // 如果某个城市不可达</span><br><span class="line">            cout &lt;&lt; start &lt;&lt; &quot;-&gt;&quot; &lt;&lt; i &lt;&lt; &quot;:no path&quot; &lt;&lt; endl;</span><br><span class="line">        &#125; else &#123; // 否则输出最短时间</span><br><span class="line">            cout &lt;&lt; start &lt;&lt; &quot;-&gt;&quot; &lt;&lt; i &lt;&lt; &quot;:&quot; &lt;&lt; dist[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="7-3-图深度优先遍历"><a href="#7-3-图深度优先遍历" class="headerlink" title="7-3 图深度优先遍历"></a>7-3 图深度优先遍历</h3><p>编写程序对给定的有向图（不一定连通）进行深度优先遍历，图中包含n个顶点，编号为0至n-1。本题限定在深度优先遍历过程中，如果同时出现多个待访问的顶点，则优先选择编号最小的一个进行访问，以顶点0为遍历起点。</p><p>输入格式:<br>输入第一行为两个整数n和e，分别表示图的顶点数和边数，其中n不超过20000，e不超过50。接下来e行表示每条边的信息，每行为两个整数a、b，表示该边的端点编号，但各边并非按端点编号顺序排列。</p><p>输出格式:<br>输出为一行整数，每个整数后一个空格，即该有向图的深度优先遍历结点序列。</p><p>输入样例1:<br>3 3<br>0 1<br>1 2<br>0 2<br>输出样例1:<br>0 1 2<br>输入样例2:<br>4 4<br>0 2<br>0 1<br>1 2<br>3 0<br>输出样例2:<br>0 1 2 3<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，通常用来表示不可达或未初始化的值。</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; adj; // 邻接表，用来存储图的边。每个元素 adj[i] 存储与顶点 i 相邻的所有顶点。</span><br><span class="line">vector&lt;bool&gt; vis; // 用于标记每个顶点是否已被访问。</span><br><span class="line">vector&lt;int&gt; ans; // 存储DFS遍历的结果（遍历顺序）。</span><br><span class="line">int n, m; // n为顶点数，m为边数。</span><br><span class="line"></span><br><span class="line">// 深度优先遍历函数</span><br><span class="line">void dfs(int x) &#123;</span><br><span class="line">    ans.push_back(x);   // 访问当前节点，将其添加到答案列表</span><br><span class="line">    vis[x] = true;      // 标记当前节点为已访问</span><br><span class="line">    // 遍历当前节点的所有邻接节点</span><br><span class="line">    for (auto v : adj[x]) &#123;</span><br><span class="line">        if (!vis[v]) &#123;   // 如果该邻接节点未被访问</span><br><span class="line">            dfs(v);      // 递归访问该邻接节点</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false); // 关闭C++标准输入输出流的同步，提升性能。</span><br><span class="line">    cin.tie(0); // 解绑cin和cout，避免在输入时强制刷新输出，进一步提升性能。</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m; // 输入图的顶点数 n 和边数 m。</span><br><span class="line">    adj.assign(n, &#123;&#125;); // 初始化邻接表，大小为n，每个元素是一个空的vector&lt;int&gt;。</span><br><span class="line">    vis.assign(n, false); // 初始化vis数组，标记所有顶点未访问。</span><br><span class="line"></span><br><span class="line">    // 读取每条边并更新邻接表</span><br><span class="line">    for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">        int u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v; // 输入边 (u, v)，表示有一条从u到v的有向边。</span><br><span class="line">        adj[u].push_back(v); // 将v加入到u的邻接表中。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 对每个顶点的邻接列表进行排序，确保深度优先遍历时访问编号最小的邻接点。</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        sort(adj[i].begin(), adj[i].end()); // 对邻接表中的每个列表进行排序。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 遍历所有顶点，若某个顶点未被访问过，则从该顶点开始进行深度优先遍历。</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        if (!vis[i]) &#123; </span><br><span class="line">            dfs(i); // 从顶点i开始DFS</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 输出DFS的遍历顺序。</span><br><span class="line">    for (auto x : ans) &#123; </span><br><span class="line">        cout &lt;&lt; x &lt;&lt; &quot; &quot;; // 输出每个节点的遍历顺序，节点之间以空格分隔。</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl; // 输出换行。</span><br><span class="line"></span><br><span class="line">    return 0; // 程序结束。</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="7-4-图的先广搜索"><a href="#7-4-图的先广搜索" class="headerlink" title="7-4 图的先广搜索"></a>7-4 图的先广搜索</h3><p>输出无向图的给定起点的先广序列。</p><p>输入格式:<br>输入第一行给出三个正整数，分别表示无向图的节点数N（1&lt;N≤10）、边数M（≤50）和探索起始节点编号S（节点从1到N编号）。</p><p>随后的M行对应M条边，每行给出一对正整数，分别是该条边直接连通的两个节点的编号。</p><p>输出格式:<br>输出从S开始的无向图的先广搜索序列（用编号表示每个节点），用一个空格隔开，最后也有一个空格；如果为非连通图，再在结尾处另起一行输出一个0，表示此图非连通。</p><p>由于广度优先遍历的节点序列是不唯一的，为了使得输出具有唯一的结果，我们约定以表头插入法构造邻接表。</p><p>输入样例:<br>6 8 2<br>1 2<br>2 3<br>3 4<br>4 5<br>5 6<br>6 4<br>3 6<br>1 5<br>输出样例:<br>2 3 1 6 4 5<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#define fastio  ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)</span><br><span class="line">using namespace std;</span><br><span class="line">const int INF = 0x3f3f3f3f; // 定义一个无穷大的常量，用于表示不可达的值</span><br><span class="line">const int N = 15;</span><br><span class="line">const int M = 55;</span><br><span class="line">struct Edge &#123;</span><br><span class="line">    int to, nxt;</span><br><span class="line">&#125;edges[M&lt;&lt;1];</span><br><span class="line">int n, m, s, cnt, head[N];</span><br><span class="line">bool vis[N];</span><br><span class="line"></span><br><span class="line">void addEdge(int u, int v)&#123;</span><br><span class="line">    edges[++cnt] = Edge(&#123;v, head[u]&#125;);</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    fastio;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">    for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">        int u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addEdge(u, v);</span><br><span class="line">        addEdge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;int&gt; que;</span><br><span class="line">    vector&lt;int&gt; ans;</span><br><span class="line">    vis[s] = true;</span><br><span class="line">    que.push(s);</span><br><span class="line">    while (!que.empty()) &#123;</span><br><span class="line">        int x = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        ans.push_back(x);</span><br><span class="line">        for (int i = head[x]; i; i = edges[i].nxt) &#123;</span><br><span class="line">            int to = edges[i].to;</span><br><span class="line">            if (!vis[to]) &#123;</span><br><span class="line">                vis[to] = true;</span><br><span class="line">                que.push(to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (auto x : ans) &#123; cout &lt;&lt; x &lt;&lt; &quot; &quot;; &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    if (ans.size() != n) &#123; cout &lt;&lt; 0; &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;7-1-旅游规划&quot;&gt;&lt;a href=&quot;#7-1-旅游规划&quot; class=&quot;headerlink&quot; title=&quot;7-1 旅游规划&quot;&gt;&lt;/a&gt;7-1 旅游规划&lt;/h3&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>优先队列</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/priority_queue/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/priority_queue/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-1-小明的账单"><a href="#7-1-小明的账单" class="headerlink" title="7-1 小明的账单"></a>7-1 小明的账单</h3><p>Background<br>Special for beginners, ^_^</p><p>Description<br>小明在一次聚会中，不慎遗失了自己的钱包，在接下来的日子，面对小明的将是一系列的补卡手续和堆积的账单。。。</p><p>在小明的百般恳求下，老板最终同意延缓账单的支付时间。可老板又提出，必须从目前还没有支付的所有账单中选出面额最大和最小的两张，并把他们付清。还没有支付的账单会被保留到下一天。</p><p>请你帮他计算出支付的顺序。</p><p>Format<br>Input<br>第 1 行：一个正整数 N(N≤15,000)，表示小明补办银联卡总共的天数。</p><p>第 2 行到第 N+1 行：每一行描述一天中收到的帐单。先是一个非负整数 M≤100，表示当天收到的账单数，后跟 M 个正整数（都小于 1,000,000,000），表示每张帐单的面额。</p><p>输入数据保证每天都可以支付两张帐单。</p><p>Output<br>输出共 N 行，每行两个用空格分隔的整数，分别表示当天支付的面额最小和最大的支票的面额。</p><p>Samples<br>样例输入1<br>4<br>3 3 6 5<br>2 8 2<br>3 7 1 7<br>0<br>样例输出1<br>3 6<br>2 8<br>1 7<br>5 7<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m;</span><br><span class="line">int id=0;</span><br><span class="line">bool vis[3000005];//账单是否已还清</span><br><span class="line">struct node &#123;//账单</span><br><span class="line">    int id;//账单编号</span><br><span class="line">    int num;//账单金额</span><br><span class="line">&#125;;</span><br><span class="line">struct big&#123;//大根堆比较仿函数</span><br><span class="line">    bool operator() (const node x,const node y)&#123;</span><br><span class="line">        return x.num&lt;y.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">struct samll&#123;//小根堆比较仿函数</span><br><span class="line">    bool operator() (const node x,const node y)&#123;</span><br><span class="line">        return x.num&gt;y.num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue &lt;node,vector&lt;node&gt;,big&gt; qd;//大根堆</span><br><span class="line">priority_queue &lt;node,vector&lt;node&gt;,samll&gt; qx;//小根堆</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for (int i=1;i&lt;=n;i++)&#123;//n天</span><br><span class="line">        cin&gt;&gt;m;</span><br><span class="line">        for(int i=1;i&lt;=m;i++)&#123;//每天m个账单</span><br><span class="line">            int x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            id++;//编号</span><br><span class="line">            node t;</span><br><span class="line">            t.id=id;</span><br><span class="line">            t.num=x;</span><br><span class="line">            qd.push(t);//大根堆入堆</span><br><span class="line">            qx.push(t);//小根堆入堆</span><br><span class="line">        &#125;</span><br><span class="line">        while(vis[qx.top().id]==true)&#123;//把小根堆中付过的账单剔除</span><br><span class="line">            qx.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        while(vis[qd.top().id]==true)&#123;//把大根堆中付过的账单剔除</span><br><span class="line">            qd.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;qx.top().num&lt;&lt;&quot; &quot;&lt;&lt;qd.top().num&lt;&lt;&quot;\n&quot;;//输出当前最小账单和最大账单</span><br><span class="line">        vis[qx.top().id]=true;//标记当前小根堆账单已付</span><br><span class="line">        vis[qd.top().id]=true;//标记当前大根堆账单已付</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-2-Windows消息队列"><a href="#7-2-Windows消息队列" class="headerlink" title="7-2 Windows消息队列"></a>7-2 Windows消息队列</h3><p>消息队列是 Windows 系统的基础。对于每个进程，系统维护一个消息队列。如果在进程中有特定事件发生，如点击鼠标、文字改变等，系统将把这个消息连同表示此消息优先级高低的正整数（称为优先级值）加到队列当中。同时，如果队列不是空的，这一进程循环地从队列中按照优先级获取消息。请注意优先级值低意味着优先级高。请编辑程序模拟消息队列，将消息加到队列中以及从队列中获取消息。</p><p>输入格式:<br>输入第 1 行给出正整数 n（≤10<br>5<br> ），随后 n 行，每行给出一个指令——GET 或 PUT，分别表示从队列中取出消息或将消息添加到队列中。如果指令是 PUT，后面就有一个消息名称、以及一个正整数表示消息的优先级，此数越小表示优先级越高。消息名称是长度不超过 10 个字符且不含空格的字符串；题目保证队列中消息的优先级无重复，且输入至少有一个 GET。</p><p>输出格式:<br>对于每个 GET 指令，在一行中输出消息队列中优先级最高的消息的名称和参数。如果消息队列中没有消息，输出 EMPTY QUEUE!。对于 PUT 指令则没有输出。</p><p>输入样例:<br>9<br>PUT msg1 5<br>PUT msg2 4<br>GET<br>PUT msg3 2<br>PUT msg4 4<br>GET<br>GET<br>GET<br>GET<br>输出样例:<br>msg2<br>msg3<br>msg4<br>msg1<br>EMPTY QUEUE!<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;iomanip&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct node &#123;</span><br><span class="line">char message[11];</span><br><span class="line">int rank;</span><br><span class="line">friend bool operator&lt;(node a, node b) &#123;</span><br><span class="line">return a.rank &gt; b.rank;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;//有序队列，按数字进行从大到小排序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">string op;</span><br><span class="line">node p;</span><br><span class="line">int n;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line">if (op[0] == &#x27;P&#x27;) &#123;</span><br><span class="line">cin &gt;&gt; p.message &gt;&gt; p.rank;</span><br><span class="line">q.push(p);</span><br><span class="line">&#125;</span><br><span class="line">else if(op[0] == &#x27;G&#x27;) &#123;</span><br><span class="line">if (!q.empty()) &#123;</span><br><span class="line">cout &lt;&lt; q.top().message &lt;&lt; endl;</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">cout &lt;&lt; &quot;EMPTY QUEUE!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;7-1-小明的账单&quot;&gt;&lt;a href=&quot;#7-1-小明的账单&quot; class=&quot;headerlink&quot; title=&quot;7-1 小明的账单&quot;&gt;&lt;/a&gt;7-1 小明的账单&lt;/h3&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/sort/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/sort/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-1-选择法排序"><a href="#7-1-选择法排序" class="headerlink" title="7-1 选择法排序"></a>7-1 选择法排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-冒泡法排序"><a href="#7-2-冒泡法排序" class="headerlink" title="7-2 冒泡法排序"></a>7-2 冒泡法排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line">    <span class="type">int</span> K, count = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; K;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j<span class="number">+1</span>];</span><br><span class="line">                arr[j<span class="number">+1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count == K) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-两个有序链表序列的合并"><a href="#7-3-两个有序链表序列的合并" class="headerlink" title="7-3 两个有序链表序列的合并"></a>7-3 两个有序链表序列的合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000008</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, x;</span><br><span class="line">    <span class="built_in">memset</span>(a, INF, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">-1</span>) &#123; flag++; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; a[i++] = x; &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">2</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(a, a + i);</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index) &#123; cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[j]; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            cout &lt;&lt; a[j]; </span><br><span class="line">            index = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!index) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-PAT排名汇总"><a href="#7-4-PAT排名汇总" class="headerlink" title="7-4 PAT排名汇总"></a>7-4 PAT排名汇总</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相同情况按学号排大小</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000008</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string id = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> exam = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> grade = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rank_all = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rank_exam = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> Student&amp; a, <span class="type">const</span> Student&amp; b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.grade == b.grade) &#123; <span class="keyword">return</span> a.id &lt; b.id; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="keyword">return</span> a.grade &gt; b.grade; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Student&gt; all;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        vector&lt;Student&gt; v;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            Student temp;</span><br><span class="line">            temp.exam = i;</span><br><span class="line">            cin &gt;&gt; temp.id &gt;&gt; temp.grade;</span><br><span class="line">            v.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;Student&gt;());<span class="comment">//降序，默认升序</span></span><br><span class="line">        <span class="type">int</span> rank = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                v[j].rank_exam = rank;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (v[j].grade == v[j - <span class="number">1</span>].grade) &#123;</span><br><span class="line">                    v[j].rank_exam = rank;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    rank = j + <span class="number">1</span>;</span><br><span class="line">                    v[j].rank_exam = rank;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum += n;</span><br><span class="line">        all.<span class="built_in">insert</span>(all.<span class="built_in">end</span>(), v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;Student&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sum; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">            all[j].rank_all = rank;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (all[j].grade == all[j - <span class="number">1</span>].grade) &#123;</span><br><span class="line">                all[j].rank_all = rank;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                rank = j + <span class="number">1</span>;</span><br><span class="line">                all[j].rank_all = rank;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">        cout &lt;&lt; all[i].id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; all[i].rank_all &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; all[i].exam &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; all[i].rank_exam &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>含bug<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000008</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string id = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> exam = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> grade = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rank_all = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> rank_exam = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> Student&amp; a, <span class="type">const</span> Student&amp; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.grade &gt; b.grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Student&gt; all;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        vector&lt;Student&gt; v;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            Student temp;</span><br><span class="line">            temp.exam = i;</span><br><span class="line">            cin &gt;&gt; temp.id &gt;&gt; temp.grade;</span><br><span class="line">            v.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;Student&gt;());<span class="comment">//降序，默认升序</span></span><br><span class="line">        <span class="type">int</span> rank = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                v[j].rank_exam = rank;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (v[j].grade == v[j - <span class="number">1</span>].grade) &#123;</span><br><span class="line">                    v[j].rank_exam = rank;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    rank = j + <span class="number">1</span>;</span><br><span class="line">                    v[j].rank_exam = rank;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum += n;</span><br><span class="line">        all.<span class="built_in">insert</span>(all.<span class="built_in">end</span>(), v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;Student&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sum; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span>) &#123; </span><br><span class="line">            all[j].rank_all = rank; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (all[j].grade == all[j - <span class="number">1</span>].grade) &#123;</span><br><span class="line">                all[j].rank_all = rank;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                rank = j + <span class="number">1</span>;</span><br><span class="line">                all[j].rank_all = rank;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">        cout &lt;&lt; all[i].id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; all[i].rank_all &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; all[i].exam &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; all[i].rank_exam &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试用例<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1</span><br><span class="line">1234567890001 100</span><br><span class="line">2</span><br><span class="line">1234567890002 99</span><br><span class="line">1234567890020 100</span><br><span class="line">2</span><br><span class="line">1234567890003 100</span><br><span class="line">1234567890033 98</span><br><span class="line">1</span><br><span class="line">1234567890004 97</span><br><span class="line">2</span><br><span class="line">1234567890005 96</span><br><span class="line">1234567890025 99</span><br><span class="line">1</span><br><span class="line">1234567890006 95</span><br><span class="line">1</span><br><span class="line">1234567890007 93</span><br><span class="line">3</span><br><span class="line">1234567890015 94</span><br><span class="line">1234567890016 91</span><br><span class="line">1234567890017 90</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;7-1-选择法排序&quot;&gt;&lt;a href=&quot;#7-1-选择法排序&quot; class=&quot;headerlink&quot; title=&quot;7-1 选择法排序&quot;&gt;&lt;/a&gt;7-1 选择法排序&lt;/h3&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="http://example.com/2024/12/31/algorithm/PTA/queue/"/>
    <id>http://example.com/2024/12/31/algorithm/PTA/queue/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="7-1-银行业务队列简单模拟"><a href="#7-1-银行业务队列简单模拟" class="headerlink" title="7-1 银行业务队列简单模拟"></a>7-1 银行业务队列简单模拟</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    cin &gt;&gt; N; <span class="comment">// 读取顾客总数</span></span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; A, B; <span class="comment">// A窗口和B窗口的队列</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result; <span class="comment">// 存储结果的向量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取顾客编号，并分配到不同的窗口</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="type">int</span> customer;</span><br><span class="line">        cin &gt;&gt; customer;</span><br><span class="line">        <span class="keyword">if</span> (customer % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            A.<span class="built_in">push</span>(customer); <span class="comment">// 奇数顾客到A窗口</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            B.<span class="built_in">push</span>(customer); <span class="comment">// 偶数顾客到B窗口</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟处理顾客</span></span><br><span class="line">    <span class="keyword">while</span> (!A.<span class="built_in">empty</span>() || !B.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="comment">// 处理A窗口的顾客</span></span><br><span class="line">        <span class="keyword">if</span> (!A.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(A.<span class="built_in">front</span>()); <span class="comment">// 处理一个A窗口的顾客</span></span><br><span class="line">            A.<span class="built_in">pop</span>(); <span class="comment">// 移除已处理的顾客</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理A窗口的第二个顾客（如果有）</span></span><br><span class="line">        <span class="keyword">if</span> (!A.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(A.<span class="built_in">front</span>());</span><br><span class="line">            A.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理B窗口的顾客</span></span><br><span class="line">        <span class="keyword">if</span> (!B.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            result.<span class="built_in">push_back</span>(B.<span class="built_in">front</span>()); <span class="comment">// 处理一个B窗口的顾客</span></span><br><span class="line">            B.<span class="built_in">pop</span>(); <span class="comment">// 移除已处理的顾客</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; result.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; result[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; result.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 在数字之间输出空格</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl; <span class="comment">// 输出换行符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-2-Windows消息队列"><a href="#7-2-Windows消息队列" class="headerlink" title="7-2 Windows消息队列"></a>7-2 Windows消息队列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">char</span> message[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> rank;</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(node a, node b) &#123;</span><br><span class="line"><span class="keyword">return</span> a.rank &gt; b.rank;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;<span class="comment">//有序队列，按数字进行从大到小排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string op;</span><br><span class="line">node p;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;P&#x27;</span>) &#123;</span><br><span class="line">cin &gt;&gt; p.message &gt;&gt; p.rank;</span><br><span class="line">q.<span class="built_in">push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">cout &lt;&lt; q.<span class="built_in">top</span>().message &lt;&lt; endl;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;EMPTY QUEUE!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-银行排队问题之单队列多窗口服务"><a href="#7-3-银行排队问题之单队列多窗口服务" class="headerlink" title="7-3 银行排队问题之单队列多窗口服务"></a>7-3 银行排队问题之单队列多窗口服务</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">customer</span>&#123; <span class="comment">// 定义顾客结构体</span></span><br><span class="line">    <span class="type">int</span> T, P;</span><br><span class="line">&#125; customer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    customer cus[<span class="number">1010</span>];</span><br><span class="line">    <span class="type">int</span> i, N, K;</span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> done_time[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;, done_num[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">// 初始化每个窗口的完成时间和服务顾客数</span></span><br><span class="line">    <span class="type">int</span> wait_time_all = <span class="number">0</span>, wait_time_max = <span class="number">0</span>, wait_time_one = <span class="number">0</span>;<span class="comment">// 总的等待时间，最长等待时间，单次等待时间</span></span><br><span class="line">    <span class="type">int</span> flag, done_time_min, done_time_max = <span class="number">0</span>, mark;<span class="comment">// 是否需要等待的标记，所有窗口中的最小完成时间和最大完成时间，以及相应窗口的序号</span></span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (rear = <span class="number">0</span>; rear &lt; N; rear++) &#123;</span><br><span class="line">        cin &gt;&gt; cus[rear].T &gt;&gt; cus[rear].P;</span><br><span class="line">        <span class="keyword">if</span> (cus[rear].P &gt; <span class="number">60</span>) &#123; cus[rear].P = <span class="number">60</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; K;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (front &lt; rear) &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>, done_time_min = <span class="number">9999</span>, mark = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (done_time[i] &lt;= cus[front].T) &#123;<span class="comment">// 队首顾客到达时间在最小完成时间后就不需要等待</span></span><br><span class="line">                done_time[i] = cus[front].T + cus[front].P;<span class="comment">// 新的完成时间为新顾客到达时间+事务处理时间</span></span><br><span class="line">                done_num[i]++;<span class="comment">// 服务顾客数+1</span></span><br><span class="line">                flag = <span class="number">1</span>;<span class="comment">// 置1表示无需等待</span></span><br><span class="line">                front++;<span class="comment">// 队首顾客出队</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果不满足前一个条件，即完成时间在顾客到达时间之后，顾客需要等待</span></span><br><span class="line">            <span class="keyword">if</span> (done_time_min &gt; done_time[i]) &#123;</span><br><span class="line">                <span class="comment">// 记录该窗口的完成时间和窗口序号，k次循环后留下的即是最小完成时间和对应窗口序号</span></span><br><span class="line">                done_time_min = done_time[i];</span><br><span class="line">                mark = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;<span class="comment">// flag = 0为需要等待</span></span><br><span class="line">            wait_time_one = done_time_min - cus[front].T;</span><br><span class="line">            <span class="keyword">if</span> (wait_time_max &lt; wait_time_one) &#123;</span><br><span class="line">                wait_time_max = wait_time_one;</span><br><span class="line">            &#125;</span><br><span class="line">            wait_time_all += wait_time_one;</span><br><span class="line">            done_time[mark] = done_time_min + cus[front].P;</span><br><span class="line">            done_num[mark]++;</span><br><span class="line">            front++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (done_time_max &lt; done_time[i]) &#123;</span><br><span class="line">            done_time_max = done_time[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1f %d %d\n&quot;</span>, <span class="number">1.0</span> * (wait_time_all / N), wait_time_max, done_time_max);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">        cout &lt;&lt; done_num[i];</span><br><span class="line">        <span class="keyword">if</span> (i == K - <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; cout &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-列车调度"><a href="#7-4-列车调度" class="headerlink" title="7-4 列车调度"></a>7-4 列车调度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> last = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    v.<span class="built_in">push_back</span>(last);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now &gt; last) &#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> pos = <span class="built_in">upper_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), now) - v.<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">if</span> (pos != v.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                k = <span class="number">1</span>;</span><br><span class="line">                v[pos] = now;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!k) &#123; v.<span class="built_in">push_back</span>(now); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> pos = <span class="built_in">upper_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), now) - v.<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">if</span> (pos != v.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                v[pos] = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = now;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; v.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;7-1-银行业务队列简单模拟&quot;&gt;&lt;a href=&quot;#7-1-银行业务队列简单模拟&quot; class=&quot;headerlink&quot; title=&quot;7-1 银行业务队列简单模拟&quot;&gt;&lt;/a&gt;7-1 银行业务队列简单模拟&lt;/h3&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="PTA" scheme="http://example.com/tags/PTA/"/>
    
  </entry>
  
  <entry>
    <title>文件管理器</title>
    <link href="http://example.com/2024/12/31/algorithm/FZU_DS/file_manager/"/>
    <id>http://example.com/2024/12/31/algorithm/FZU_DS/file_manager/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.081Z</updated>
    
    <content type="html"><![CDATA[<p><strong>测试用例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">1 2 10 1</span><br><span class="line">1 2 20 2</span><br><span class="line">1 2 30 3</span><br><span class="line">1 2 40 3</span><br><span class="line">1 2 50 3</span><br><span class="line">3 1 5</span><br><span class="line">4 1 9</span><br><span class="line">3 2 3</span><br><span class="line">4 2 3</span><br><span class="line">4 2 10</span><br></pre></td></tr></table></figure><h3 id="mine"><a href="#mine" class="headerlink" title="mine"></a>mine</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max1 = <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> max2 = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">File</span> &#123;</span><br><span class="line"><span class="type">int</span> name;<span class="comment">//文件名</span></span><br><span class="line"><span class="type">int</span> size;<span class="comment">//大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;File&gt; folders[<span class="number">5</span>];<span class="comment">//文件夹</span></span><br><span class="line"><span class="type">int</span> Q;</span><br><span class="line">cin &gt;&gt; Q;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="type">int</span> op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="type">int</span> folder, name, size, k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">cin &gt;&gt; folder &gt;&gt; name &gt;&gt; size;</span><br><span class="line">vector&lt;File&gt;::iterator it = <span class="built_in">find_if</span>(folders[folder].<span class="built_in">begin</span>(), folders[folder].<span class="built_in">end</span>(), [name](File f) &#123;<span class="keyword">return</span> f.name == name; &#125;);<span class="comment">//匿名函数</span></span><br><span class="line"><span class="keyword">if</span> (it != folders[folder].<span class="built_in">end</span>()) &#123; it-&gt;size = size; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">File f;</span><br><span class="line">f.name = name;</span><br><span class="line">f.size = size;</span><br><span class="line">folders[folder].<span class="built_in">push_back</span>(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">cin &gt;&gt; folder &gt;&gt; name;</span><br><span class="line">vector&lt;File&gt;::iterator it = <span class="built_in">find_if</span>(folders[folder].<span class="built_in">begin</span>(), folders[folder].<span class="built_in">end</span>(), [name](File f) &#123;<span class="keyword">return</span> f.name == name; &#125;);<span class="comment">//匿名函数</span></span><br><span class="line"><span class="keyword">if</span> (it != folders[folder].<span class="built_in">end</span>()) &#123; folders[folder].<span class="built_in">erase</span>(it); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">cin &gt;&gt; folder &gt;&gt; k;</span><br><span class="line"><span class="built_in">sort</span>(folders[folder].<span class="built_in">begin</span>(), folders[folder].<span class="built_in">end</span>(), [](File f1, File f2) &#123;<span class="keyword">return</span> f<span class="number">1.</span>size == f<span class="number">2.</span>size ? f<span class="number">1.</span>name &lt; f<span class="number">2.</span>name : f<span class="number">1.</span>size &gt; f<span class="number">2.</span>size; &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; folders[folder].<span class="built_in">size</span>() &amp;&amp; k; i++, k--) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) &#123; cout &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line">cout &lt;&lt; folders[folder][i].name;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">cin &gt;&gt; folder &gt;&gt; k;</span><br><span class="line"><span class="built_in">sort</span>(folders[folder].<span class="built_in">begin</span>(), folders[folder].<span class="built_in">end</span>(), [](File f1, File f2) &#123;<span class="keyword">return</span> f<span class="number">1.</span>size == f<span class="number">2.</span>size ? f<span class="number">1.</span>name &lt; f<span class="number">2.</span>name : f<span class="number">1.</span>size &lt; f<span class="number">2.</span>size; &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; folders[folder].<span class="built_in">size</span>() &amp;&amp; k; i++, k--) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) &#123; cout &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;</span><br><span class="line">cout &lt;&lt; folders[folder][i].name;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">doc</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> name = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line">cin &gt;&gt; sum;</span><br><span class="line">vector&lt;doc&gt; v[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line"><span class="type">int</span> op;</span><br><span class="line"><span class="type">int</span> folder, name, size, k;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">cin &gt;&gt; folder &gt;&gt; name &gt;&gt; size;</span><br><span class="line">vector&lt;doc&gt;::iterator i = <span class="built_in">find_if</span>(v[folder].<span class="built_in">begin</span>(), v[folder].<span class="built_in">end</span>(), [name](doc d) &#123;<span class="keyword">return</span> d.name == name; &#125;);</span><br><span class="line"><span class="keyword">if</span> (i != v[folder].<span class="built_in">end</span>()) i-&gt;size = size;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">doc d;</span><br><span class="line">d.name = name;</span><br><span class="line">d.size = size;</span><br><span class="line">v[folder].<span class="built_in">push_back</span>(d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">cin &gt;&gt; folder &gt;&gt; name;</span><br><span class="line">vector&lt;doc&gt;::iterator i = <span class="built_in">find_if</span>(v[folder].<span class="built_in">begin</span>(), v[folder].<span class="built_in">end</span>(), [name](doc d) &#123;<span class="keyword">return</span> d.name == name; &#125;);</span><br><span class="line"><span class="keyword">if</span> (i != v[folder].<span class="built_in">end</span>()) v[folder].<span class="built_in">erase</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">cin &gt;&gt; folder &gt;&gt; k;</span><br><span class="line"><span class="built_in">sort</span>(v[folder].<span class="built_in">begin</span>(), v[folder].<span class="built_in">end</span>(), [](doc d1, doc d2) &#123;<span class="keyword">return</span> d<span class="number">1.</span>size == d<span class="number">2.</span>size ? d<span class="number">1.</span>name &lt; d<span class="number">2.</span>name: d<span class="number">1.</span>size &gt; d<span class="number">2.</span>size; &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v[folder].<span class="built_in">size</span>() &amp;&amp; k; i++, k--) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[folder][i].name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">cin &gt;&gt; folder &gt;&gt; k;</span><br><span class="line"><span class="built_in">sort</span>(v[folder].<span class="built_in">begin</span>(), v[folder].<span class="built_in">end</span>(), [](doc d1, doc d2) &#123;<span class="keyword">return</span> d<span class="number">1.</span>size == d<span class="number">2.</span>size ? d<span class="number">1.</span>name &lt; d<span class="number">2.</span>name: d<span class="number">1.</span>size &lt; d<span class="number">2.</span>size; &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v[folder].<span class="built_in">size</span>() &amp;&amp; k; i++, k--) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[folder][i].name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">1 2 10 1</span><br><span class="line">1 2 20 2</span><br><span class="line">1 2 30 3</span><br><span class="line">1 2 40 3</span><br><span class="line">1 2 50 3</span><br><span class="line">3 1 5</span><br><span class="line"></span><br><span class="line">4 1 9</span><br><span class="line"></span><br><span class="line">3 2 3</span><br><span class="line">30 40 50</span><br><span class="line">4 2 3</span><br><span class="line">10 20 30</span><br><span class="line">4 2 10</span><br><span class="line">10 20 30 40 50</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;测试用例&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="FZU_DS" scheme="http://example.com/tags/FZU-DS/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="http://example.com/2024/12/31/algorithm/FZU_DS/map/"/>
    <id>http://example.com/2024/12/31/algorithm/FZU_DS/map/</id>
    <published>2024-12-30T16:00:00.000Z</published>
    <updated>2025-01-02T06:41:27.081Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="dd899b77b76cfe52b51ee695980809df4253f4912d7e9af82d0e0e140b0884ea"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="算法与数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="FZU_DS" scheme="http://example.com/tags/FZU-DS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/12/30/hello-world/"/>
    <id>http://example.com/2024/12/30/hello-world/</id>
    <published>2024-12-30T15:42:05.898Z</published>
    <updated>2025-01-02T06:41:27.069Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机小知识" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
